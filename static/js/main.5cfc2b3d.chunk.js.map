{"version":3,"sources":["App/style.module.css","formats/windows1252.js","formats/chineseTelegraph.js","formats/big5.js","formats/index.js","Toast.js","output.jsx","UCDSearch.jsx","App/index.jsx","index.js"],"names":["module","exports","UPPER_HALF","windows1252","label","isValid","value","length","byteString","map","c","charCodeAt","indexOf","x","String","fromCharCode","join","utf8","decode","e","parse","string","codePointAt","fromCodePoint","windows1252Hex","trim","split","every","v","test","parseInt","codePoints","hex","index","toString","padStart","taiwanTelegraphMapping","require","mainlandTelegraphMapping","taiwanTelegraph","n","mainlandTelegraph","data","big5","findRange","range","delta","offset","chars","hexValue","start","end","raw","codepoints","i","cp","push","encoded","he","encode","urlEncoded","decodeURIComponent","encodeURIComponent","escaped","this","rawList","re","item","match","out","pos","exec","substring","substr","flatten","codePoint","decimal","replace","s","a","b","RangeError","Array","fill","p","bytes","u","binary","arr","concat","div","document","createElement","className","CommonOutput","onSelect","children","copyable","defaultExpanded","useState","expanded","setExpanded","onClick","getSelection","getRangeAt","collapsed","style","cursor","padding","classes","switchInput","stopPropagation","message","el","body","appendChild","select","execCommand","removeChild","copyText","innerText","setTimeout","color","StringOutput","props","str","EncodedOutput","useNamedReferences","formats","EscapedOutput","URLEncodedOutput","DecimalOutput","Windows1252HexOutput","CodePoints","cpList","React","ucd","setUCD","useEffect","then","default","codePointOutput","flex","codePointList","Char","UTF8Bytes","Bytes","UTF8Binary","fontSize","BinaryBytes","isNaN","char","title","getName","Number","toUpperCase","labelName","byte","marginRight","binaryByte","bytePrefix","byteData","bString","UCDSearch","onChoose","setValue","fetchUCD","results","limit","found","reg","RegExp","characterNameList","name","includes","searchParts","searchUCD","type","onChange","target","placeholder","r","forEach","App","state","getHash","format","setState","window","addEventListener","inputRef","focus","oldState","location","hash","ii","formatter","container","input","border","ref","insertCodePoint","inOutContainer","inputContainer","sectionHeader","inputList","Object","keys","key","classNames","inputChoice","ij","invalidInput","selectedInput","undefined","console","debug","outputContainer","output","Component","inputMatch","ReactDOM","render","getElementById"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,qBAAqB,eAAiB,8BAA8B,eAAiB,8BAA8B,gBAAkB,+BAA+B,UAAY,yBAAyB,YAAc,2BAA2B,cAAgB,6BAA6B,aAAe,4BAA4B,OAAS,sBAAsB,MAAQ,qBAAqB,UAAY,yBAAyB,KAAO,oBAAoB,KAAO,oBAAoB,WAAa,0BAA0B,WAAa,0BAA0B,SAAW,wBAAwB,YAAc,2BAA2B,cAAgB,+B,u/tMCEpsBC,EAAa,yjBAGNC,EAAc,CACvBC,MAAO,0BACPC,QAAS,SAACC,GACN,GAAqB,IAAjBA,EAAMC,OAAc,OAAO,EAE/B,IAEMC,EAFQ,YAAIF,GAAOG,KAAI,SAAAC,GAAC,OAAIA,EAAEC,WAAW,GAAK,IAAOD,EAAEC,WAAW,GAAK,IAAOT,EAAWU,QAAQF,MAE9ED,KAAI,SAAAI,GAAC,OAAIC,OAAOC,aAAaF,MAAIG,KAAK,IAE/D,IAGI,OAFAC,IAAKC,OAAOV,IAEL,EACT,MAAOW,GACL,OAAO,IAGfC,MAjBuB,SAiBhBd,GACH,GAAqB,IAAjBA,EAAMC,OAAc,MAAO,GAE/B,IAEMC,EAFQ,YAAIF,GAAOG,KAAI,SAAAC,GAAC,OAAIA,EAAEC,WAAW,GAAK,IAAOD,EAAEC,WAAW,GAAK,IAAOT,EAAWU,QAAQF,MAE9ED,KAAI,SAAAI,GAAC,OAAIC,OAAOC,aAAaF,MAAIG,KAAK,IAE/D,IACI,IAAMK,EAASJ,IAAKC,OAAOV,GAI3B,OAFmB,YAAIa,GAAQZ,KAAI,SAAAI,GAAC,OAAIA,EAAES,YAAY,MAGxD,MAAOH,GACL,MAAO,KAGfI,cAlCuB,WAmCnB,MAAO,KAKFC,EAAiB,CAC1BpB,MAAO,oCACPC,QAAS,SAACC,GACN,OAAqB,IAAjBA,EAAMC,QACHD,EAAMmB,OAAOC,MAAM,KAAKC,OAAM,SAAAC,GAAC,MAAI,eAAeC,KAAKD,IAAME,SAASF,EAAG,IAAM,QAE1FR,MAN0B,SAMnBd,GACH,OAAqB,IAAjBA,EAAMC,OAAqB,GAEhBD,EAAMmB,OAAOC,MAAM,KAAKjB,KAAI,SAAAmB,GAAC,OAAIE,SAASF,EAAG,OAE9CnB,KAAI,SAAAmB,GAAC,OAAIA,EAAI,IAAOA,EAAI1B,EAAWoB,YAAYM,EAAI,SAErEL,cAb0B,WAaK,IAAD,uBAAZQ,EAAY,yBAAZA,EAAY,gBAC1B,OAAOA,EAAWtB,KAAI,SAAAC,GAClB,IAAIsB,EAAM,EAEV,GAAItB,EAAI,IAAMsB,EAAMtB,MACf,CACD,IAAMuB,EAAQ/B,EAAWU,QAAQE,OAAOS,cAAcb,IACvCsB,EAAXC,EAAQ,EAASvB,EACV,IAAOuB,EAGtB,OAAOD,EAAIE,SAAS,IAAIC,SAAS,EAAG,QACrCnB,KAAK,OCtEVoB,EAAyBC,EAAQ,IACjCC,EAA2BD,EAAQ,IAO5BE,EAAkB,CAC3BnC,MAAO,uCACPC,QAF2B,SAElBC,GACL,OAAqB,IAAjBA,EAAMC,SAIN,UAAUsB,KAAKvB,IAIZA,EAAMmB,OAAOC,MAAM,KAAKjB,KAAI,SAAAmB,GAAC,OAAIE,SAASF,EAAG,OAAKD,OAAM,SAAAa,GAAC,OAAIA,GAAK,GAAKA,GAhB9D,MAgBsFJ,EAAuBI,OAEjIpB,MAb2B,SAapBd,GACH,OAA4B,IAAxBA,EAAMmB,OAAOlB,OACN,GAGJD,EAAMmB,OAAOC,MAAM,KAAKjB,KAAI,SAAAmB,GAAC,OAAIQ,EAAuBN,SAASF,EAAG,SAE/EL,cApB2B,WAqBvB,MAAO,KAKFkB,EAAoB,CAC7BrC,MAAO,sCACPC,QAF6B,SAEpBC,GACL,OAAqB,IAAjBA,EAAMC,SAIN,UAAUsB,KAAKvB,IAIZA,EAAMmB,OAAOC,MAAM,KAAKjB,KAAI,SAAAmB,GAAC,OAAIE,SAASF,EAAG,OAAKD,OAAM,SAAAa,GAAC,OAAIA,GAAK,GAAKA,GAzC5D,MAyCsFF,EAAyBE,OAErIpB,MAb6B,SAatBd,GACH,OAA4B,IAAxBA,EAAMmB,OAAOlB,OACN,GAGJD,EAAMmB,OAAOC,MAAM,KAAKjB,KAAI,SAAAmB,GAAC,OAAIU,EAAyBR,SAASF,EAAG,SAEjFL,cApB6B,WAqBzB,MAAO,K,QCxDTmB,EAAOL,EAAQ,IAGRM,EAAO,CAChBvC,MAAO,4BACPC,QAAS,SAACC,GACN,OAAqB,IAAjBA,EAAMC,QACHD,EAAMmB,OAAOC,MAAM,KAAKC,OAAM,SAAAC,GAAC,MAAI,eAAeC,KAAKD,IAAMgB,EAAUd,SAASF,EAAG,SAE9FR,MANgB,SAMTd,GACH,OAAqB,IAAjBA,EAAMC,OAAqB,GAEhBD,EAAMmB,OAAOC,MAAM,KAAKjB,KAAI,SAAAmB,GAAC,OAAIE,SAASF,EAAG,OAE9CnB,KAAI,SAAAmB,GACd,IAAMiB,EAAQD,EAAUhB,GAClBkB,EAAQlB,EAAIiB,EAAME,OACxB,OAAOF,EAAMG,MAAMF,GAAOnC,WAAW,OAG7CY,cAjBgB,WAkBZ,MAAO,KAOf,SAASqB,EAAWK,GAAW,IAAD,gBACNP,GADM,IAC1B,2BAA0B,CAAC,IAAhBG,EAAe,QAChBK,EAAQL,EAAME,OACdI,EAAMD,EAAQL,EAAMG,MAAMzC,OAEhC,GAAI2C,GAASD,GAAYA,EAAWE,EAChC,OAAON,GANW,8BAU1B,OAAO,KC3BJ,IAAMO,EAAM,CACfhD,MAAO,iBACPC,QAAS,kBAAM,GACfe,MAHe,SAGRd,GAKH,IAJA,IAAM8C,EAAMtC,OAAOR,GAEb+C,EAAa,GAEVC,EAAI,EAAGA,EAAIF,EAAI7C,OAAQ+C,IAAK,CACjC,IAAMC,EAAKH,EAAI9B,YAAYgC,GAC3BD,EAAWG,KAAKD,GACZA,EAAK,OACLD,IAIR,OAAOD,GAEX9B,cAlBe,WAmBX,OAAOT,OAAOS,cAAP,MAAAT,OAAM,aAKR2C,EAAU,CACnBrD,MAAO,eACPC,QAAS,kBAAM,GACfe,MAHmB,SAGZd,GACH,OAAO8C,EAAIhC,MAAMsC,IAAGxC,OAAOJ,OAAOR,MAEtCiB,cANmB,WAOf,OAAOmC,IAAGC,OAAO7C,OAAOS,cAAP,MAAAT,OAAM,cAKlB8C,EAAa,CACtBxD,MAAO,cACPC,QAAS,SAACC,GACN,IAEI,OADA,YAAIuD,mBAAmB/C,OAAOR,KAASG,KAAI,SAAAC,GAAC,OAAIA,EAAEC,WAAW,OACtD,EACT,MAAOQ,GACL,OAAO,IAGfC,MAVsB,SAUfd,GACH,IACI,OAAO,YAAIuD,mBAAmB/C,OAAOR,KAASG,KAAI,SAAAC,GAAC,OAAIA,EAAEC,WAAW,MACtE,MAAOQ,GACL,MAAO,KAGfI,cAjBsB,WAkBlB,IACI,OAAOuC,mBAAmBhD,OAAOS,cAAP,MAAAT,OAAM,YAClC,MAAOK,GACL,MAAO,MAMN4C,EAAU,CACnB3D,MAAO,mBACPC,QAFmB,SAEVC,GACL,IAEI,OADmB0D,KAAK5C,MAAMd,GACZqB,OAAM,SAAAd,GAAC,OAAIA,GAAK,GAAKA,EAAI,WAC7C,MAAOM,GACL,OAAO,IAGfC,MAVmB,SAUZd,GASH,IAPA,IAAI2D,EAAU,CAAC3D,GAFL,aASL,IAAM4D,EAAE,KACTD,EAAUA,EAAQxD,KAAI,SAAA0D,GAClB,GAAoB,kBAATA,EAAmB,CAI1B,IAHA,IACIC,EADEC,EAAM,GAERC,EAAM,EACHF,EAAQF,EAAGK,KAAKJ,IACfC,EAAMnC,MAAQqC,GACdD,EAAIb,KAAKW,EAAKK,UAAUF,EAAKF,EAAMnC,QAEvCqC,EAAMF,EAAMnC,MAAQmC,EAAM,GAAG7D,OAC7B8D,EAAIb,KAAK1B,SAASsC,EAAM,GAAI,KAGhC,OADIE,EAAMH,EAAK5D,QAAQ8D,EAAIb,KAAKW,EAAKM,OAAOH,IACrCD,EAEX,OAAOF,KAEXF,EAAUS,EAAQT,IAlBtB,MALgB,CACZ,uBACA,uBACA,wBAEJ,eAA2B,IAyB3B,OAJAA,EAAUA,EAAQxD,KAAI,SAAA0D,GAAI,MAAoB,kBAATA,EAAoB,YAAIA,GAAM1D,KAAI,SAAAI,GAAC,OAAIA,EAAES,YAAY,MAAM6C,KAE7EO,EAAQT,IAI/B1C,cA9CmB,WA8CY,IAAD,uBAAZQ,EAAY,yBAAZA,EAAY,gBAC1B,OAAOA,EAAWtB,KAAI,SAAAkE,GAAS,OAC1BA,GAAa,IAAQA,EAAY,IAE9B7D,OAAOS,cAAcoD,GAGpBA,EAAY,MAAS,MAAQA,EAAUzC,SAAS,IAAIC,SAAS,EAAG,KAAhE,cAA8EwC,EAAUzC,SAAS,IAAjG,QACPlB,KAAK,MAKF4D,EAAU,CACnBxE,MAAO,4BACPC,QAFmB,SAEVC,GACL,GAAqB,IAAjBA,EAAMC,OACN,OAAO,EAGX,GAAID,EAAM8D,MAAM,UACZ,OAAO,EAGX,IAEI,OADmBQ,EAAQxD,MAAMd,GACfqB,OAAM,SAAAd,GAAC,OAAIA,GAAK,GAAKA,EAAI,WAC7C,MAAOM,GACL,OAAO,IAGfC,MAlBmB,SAkBZd,GACH,IAAM8C,EAAM9C,EAAMuE,QAAQ,UAAW,IAAIpD,OAAOoD,QAAQ,MAAO,KAE/D,OAAmB,IAAfzB,EAAI7C,OACG,GAGQ6C,EAAI1B,MAAM,KAAKjB,KAAI,SAAAI,GAAC,OAAIiB,SAASjB,EAAG,QAI3DU,cA7BmB,WA6BY,IAAD,uBAAZQ,EAAY,yBAAZA,EAAY,gBAC1B,OAAOA,EAAWtB,KAAI,SAAA8C,GAAE,OAAIA,EAAGrB,SAAS,OAAKlB,KAAK,OAK7CgB,EAAM,CACf5B,MAAO,gCACPC,QAFe,SAENC,GACL,GAAqB,IAAjBA,EAAMC,OACN,OAAO,EAGX,GAAID,EAAM8D,MAAM,kBACZ,OAAO,EAGX,IAEI,OADmBpC,EAAIZ,MAAMd,GACXqB,OAAM,SAAAd,GAAC,OAAIA,GAAK,GAAKA,EAAI,WAC7C,MAAOM,GACL,OAAO,IAGfC,MAlBe,SAkBRd,GACH,IAAM8C,EAAM9C,EAAMuE,QAAQ,kBAAmB,IAAIpD,OAAOoD,QAAQ,UAAW,KAE3E,OAAmB,IAAfzB,EAAI7C,OACG,GAGM6C,EAAIyB,QAAQ,2BAA2B,SAACC,EAAGC,EAAGC,GAC3D,IAAM9B,EAAQpB,SAASiD,EAAG,IACpB5B,EAAMrB,SAASkD,EAAG,IAExB,GAAI9B,GAASC,EACT,MAAM8B,WAAW,gCAAD,OAAiC/B,EAAjC,cAA4CC,IAGhE,GAAIA,EAAMD,GAAS,KACf,MAAM+B,WAAW,yBAAD,OAA0B9B,EAAMD,IAGpD,OAAOgC,MAAM/B,EAAMD,EAAQ,GAAGiC,KAAK,GAAG1E,KAAI,SAACI,EAAEyC,GAAH,OAAUA,EAAIJ,GAAOhB,SAAS,OAAKlB,KAAK,QACnFU,MAAM,KAEmBjB,KAAI,SAAA2E,GAAC,OAAIA,EAAEP,QAAQ,OAAQ,OAAKpE,KAAI,SAAAI,GAAC,OAAIiB,SAASjB,EAAG,QAIrFU,cA5Ce,WA4CgB,IAAD,uBAAZQ,EAAY,yBAAZA,EAAY,gBAC1B,OAAOA,EAAWtB,KAAI,SAAA8C,GAAE,OAAIA,EAAGrB,SAAS,OAAKlB,KAAK,OAK7CC,EAAO,CAChBb,MAAO,cACPC,QAFgB,SAEPC,GAEL,GADAA,EAAQA,EAAMuE,QAAQ,OAAQ,KACzB,gBAAgBhD,KAAKvB,GACtB,OAAO,EAGX,IACI,IAAM8C,EAAMtC,OAAOR,GAAOuE,QAAQ,QAAS,IAC3C,GAAIzB,EAAI7C,OAAS,EACb,OAAO,EAKX,IAFA,IAAM8E,EAAQ,GAEL/B,EAAI,EAAGA,EAAIF,EAAI7C,OAAQ+C,GAAK,EACjC+B,EAAM7B,KAAK1B,SAASsB,EAAIqB,OAAOnB,EAAE,GAAI,KAGzC,IAAM9C,EAAaM,OAAOC,aAAP,MAAAD,OAAuBuE,GAG1C,OAFAC,IAAEpE,OAAOV,IAEF,EACT,MAAOW,GACL,OAAO,IAGfC,MA5BgB,SA4BTd,GACH,IAAM8C,EAAMtC,OAAOR,GAAOuE,QAAQ,OAAQ,IAAIA,QAAQ,KAAM,IAC5D,GAAIzB,EAAI7C,OAAS,EACb,MAAO,GAKX,IAFA,IAAM8E,EAAQ,GAEL/B,EAAI,EAAGA,EAAIF,EAAI7C,OAAQ+C,GAAK,EACjC+B,EAAM7B,KAAK1B,SAASsB,EAAIqB,OAAOnB,EAAE,GAAI,KAGzC,IAAM9C,EAAa6E,EAAM5E,KAAI,SAAAI,GAAC,OAAIC,OAAOC,aAAaF,MAAIG,KAAK,IAE/D,IACI,IAAMK,EAASiE,IAAEpE,OAAOV,GAIxB,OAFmB,YAAIa,GAAQZ,KAAI,SAAAI,GAAC,OAAIA,EAAES,YAAY,MAGxD,MAAOH,GACL,MAAO,KAGfI,cApDgB,SAoDDQ,GACX,OAAO,YAAIuD,IAAE3B,OAAO7C,OAAOS,cAAP,MAAAT,OAAM,YAAkBiB,MAActB,KAAI,SAAAC,GAAC,OAAIA,EAAEC,WAAW,GAAGuB,SAAS,IAAIC,SAAS,EAAG,QAAMnB,KAAK,OAKlHuE,EAAS,CAClBnF,MAAO,iBACPC,QAFkB,SAETC,GACL,GAAqB,IAAjBA,EAAMC,OACN,OAAO,EAGX,GAAI,SAASsB,KAAKvB,GACd,OAAO,EAGX,IAEME,EAFQF,EAAMoB,MAAM,KAAKjB,KAAI,SAAAmB,GAAC,OAAIE,SAASF,EAAG,MAE3BnB,KAAI,SAAAI,GAAC,OAAIC,OAAOC,aAAaF,MAAIG,KAAK,IAE/D,IAGI,OAFAsE,IAAEpE,OAAOV,IAEF,EACT,MAAOW,GACL,OAAO,IAGfC,MAvBkB,SAuBXd,GACH,GAA4B,IAAxBA,EAAMmB,OAAOlB,OACb,MAAO,GAGX,IAEMC,EAFQF,EAAMmB,OAAOC,MAAM,KAAKjB,KAAI,SAAAmB,GAAC,OAAIE,SAASF,EAAG,MAElCnB,KAAI,SAAAI,GAAC,OAAIC,OAAOC,aAAaF,MAAIG,KAAK,IAE/D,IACI,IAAMK,EAASiE,IAAEpE,OAAOV,GAIxB,OAFmB,YAAIa,GAAQZ,KAAI,SAAAI,GAAC,OAAIA,EAAES,YAAY,MAGxD,MAAOH,GACL,MAAO,KAGfI,cA1CkB,WA2Cd,IACI,IAAM8D,EAAQC,IAAE3B,OAAO7C,OAAOS,cAAP,MAAAT,OAAM,YAC7B,OAAO,YAAIuE,GAAO5E,KAAI,SAAAuE,GAAC,OAAIA,EAAErE,WAAW,GAAGuB,SAAS,GAAGC,SAAS,EAAG,QAAMnB,KAAK,KAChF,MAAOG,GACL,MAAO,MAUbuD,EAAU,SAAAc,GAAG,aAAI,MAAGC,OAAH,oBAAaD,K,OC7U9BE,EAAMC,SAASC,cAAc,OACnCF,EAAIG,UAAY,Q,2BCmBhB,SAASC,EAAT,GAAiH,IAAxF1F,EAAuF,EAAvFA,MAAO2F,EAAgF,EAAhFA,SAAU1E,EAAsE,EAAtEA,OAAsE,IAA9D2E,gBAA8D,MAAnD,KAAmD,MAA7CC,gBAA6C,aAA3BC,uBAA2B,SAC9G,EAAkCC,mBAASD,GAA3C,mBAAQE,EAAR,KAAkBC,EAAlB,KAEA,OACE,sBAAKC,QAAS,WAAQX,SAASY,eAAeC,WAAW,GAAGC,WAAaJ,GAAaD,IAAcM,MAAO,CAACC,OAAO,UAAWC,QAAS,SAAvI,UACE,oBAAGf,UAAWgB,IAAQzG,MAAtB,UACIA,EAAQ,IACR2F,GAAY,wBAAQF,UAAWgB,IAAQC,YAAaR,QAAS,SAAAnF,GAAOA,EAAE4F,kBAAmBhB,EAAS1E,IAAtF,oBACZ4E,GAAY,wBAAQJ,UAAWgB,IAAQC,YAAaR,QAAS,SAAAnF,GDtBhE,IAAgB6F,ECsBuD7F,EAAE4F,kBAjBhF,SAAmB1F,GACjB,IAAM4F,EAAKtB,SAASC,cAAc,YAClCqB,EAAG3G,MAAQe,EACXsE,SAASuB,KAAKC,YAAYF,GAC1BA,EAAGG,SACHzB,SAAS0B,YAAY,QACrB1B,SAASuB,KAAKI,YAAYL,GAWuEM,CAASlG,GDtBrF2F,ECsBoG,SDrBvHtB,EAAI8B,UAAYR,EAChBrB,SAASuB,KAAKC,YAAYzB,GAC1B+B,YAAW,WACP,IAAM9B,SAASuB,KAAKI,YAAY5B,GAChC,MAAOvE,OACR,MCgBe,0BACd,sBAAMuF,MAAO,CAACgB,MAAO,SAArB,SAAgCtB,EAAW,SAAM,cAEjDA,IAAaJ,GAAY3E,MAQ1B,SAASsG,EAAcC,GAC5B,IAAMC,EAAM/G,OAAOS,cAAP,MAAAT,OAAM,YAAkB8G,EAAMvE,aAC1C,OAAO,cAACyC,EAAD,CAAc1F,MAAM,SAAS2F,SAAU6B,EAAM7B,SAAU1E,OAAQwG,EAAK5B,UAAQ,EAACC,iBAAe,IAM9F,SAAS4B,EAAeF,GAC7B,IAAMC,EAAMnE,IAAGC,OAAO7C,OAAOS,cAAP,MAAAT,OAAM,YAAkB8G,EAAMvE,aAAa,CAAE0E,oBAAoB,IACvF,OAAO,cAACjC,EAAD,CAAc1F,MAAO4H,EAAgB5H,MAAO2F,SAAU6B,EAAM7B,SAAU1E,OAAQwG,IAMhF,SAASI,EAAeL,GAAQ,IAAD,EAC9BC,GAAM,EAAAG,GAAgBzG,cAAhB,oBAAiCqG,EAAMvE,aACnD,OAAO,cAACyC,EAAD,CAAc1F,MAAO4H,EAAgB5H,MAAO2F,SAAU6B,EAAM7B,SAAU1E,OAAQwG,IAM/E,SAASK,EAAkBN,GAAQ,IAAD,EACxC,OAAO,cAAC9B,EAAD,CAAc1F,MAAO4H,EAAmB5H,MAAO2F,SAAU6B,EAAM7B,SAAU1E,QAAQ,EAAA2G,GAAmBzG,cAAnB,oBAAoCqG,EAAMvE,eAM7H,SAAS8E,EAAeP,GAC7B,OAAO,cAAC9B,EAAD,CAAc1F,MAAO4H,EAAgB5H,MAAO2F,SAAU6B,EAAM7B,SAAU1E,OAAQuG,EAAMvE,WAAWrC,KAAK,OAMtG,SAASoH,EAAsBR,GAAQ,IAAD,EAC3C,OAAO,cAAC9B,EAAD,CAAc1F,MAAO4H,EAAuB5H,MAAO2F,SAAU6B,EAAM7B,SAAU1E,QAAQ,EAAA2G,GAAuBzG,cAAvB,oBAAwCqG,EAAMvE,eAMrI,SAASgF,EAAT,GAAgD,IAAzBhF,EAAwB,EAAxBA,WAAY0C,EAAY,EAAZA,SAClCuC,EAASjF,EAAW5C,KAAI,SAAA8C,GAAE,OAAIA,EAAGrB,SAAS,OAAKlB,KAAK,KAC1D,EAAwBuH,IAAMpC,SAAS,MAAvC,mBAAQqC,EAAR,KAAaC,EAAb,KAUA,OARAF,IAAMG,WAAU,WACVrF,EAAW9C,SAAWiI,GACxB,iCAAqBG,MAAK,YAAuB,IAAXH,EAAU,EAAnBI,QAC3BH,EAAOD,QAGV,CAACnF,EAAYmF,IAGd,sBAAK3C,UAAWgB,IAAQgC,gBAAiBnC,MAAO,CAACoC,KAAK,GAAtD,UACE,oBAAGjD,UAAWgB,IAAQzG,MAAtB,0BACgBiD,EAAW9C,OAD3B,IAEIwF,GAAY,wBAAQF,UAAWgB,IAAQC,YAAaR,QAAS,kBAAMP,EAASuC,IAAhE,uBAEhB,qBAAKzC,UAAWgB,IAAQkC,cAAxB,SAEI1F,EAAW5C,KAAI,SAACI,EAAEyC,GAAH,OAAS,cAAC0F,GAAD,CAAM1I,MAAOO,EAAW2H,IAAKA,GAARlF,WAUhD,SAAS2F,EAAWrB,GAEzB,IACE,IAAMnE,EAAUxC,IAAK0C,OAAO7C,OAAOS,cAAP,MAAAT,OAAM,YAAkB8G,EAAMvE,cACpDgC,EAAQ,YAAI5B,GAAShD,KAAI,SAAAuE,GAAC,OAAIA,EAAErE,WAAW,GAAGuB,SAAS,IAAIC,SAAS,EAAE,QAAMnB,KAAK,KACjFT,EAASkD,EAAQlD,OAEvB,OACE,cAACuF,EAAD,CACE1F,MAAK,iBAAYG,EAAZ,YAAiC,IAAXA,EAAe,OAAS,QAA9C,KACLwF,SAAU6B,EAAM7B,SAChB1E,OAAQgE,EAHV,SAMIuC,EAAMvE,WAAW5C,KAAI,SAACI,EAAEyC,GAAH,OAAS,cAAC4F,GAAD,CAAO5I,MAAOO,GAAQyC,QAI1D,MAAOnC,GACP,OAAO,MAOJ,SAASgI,GAAYvB,GAAQ,IAAD,EACjC,OACE,cAAC9B,EAAD,CACE1F,MAAK,aACL2F,SAAU6B,EAAM7B,SAChB1E,QAAQ,EAAA2G,GAAezG,cAAf,oBAAgCqG,EAAMvE,aAHhD,SAKE,qBAAKqD,MAAO,CAAC0C,SAAS,QAAtB,SAEIxB,EAAMvE,WAAW5C,KAAI,SAACI,EAAEyC,GAAH,OAAS,cAAC+F,GAAD,CAAa/I,MAAOO,GAAQyC,UAUpE,SAAS0F,GAAMpB,GACb,GAAG0B,MAAM1B,EAAMtH,OAAQ,OAAO,KAE9B,IAAMiJ,EAAOzI,OAAOS,cAAcqG,EAAMtH,OAClCkJ,EAAQ5B,EAAMY,IAAMZ,EAAMY,IAAIiB,QAAQF,GAAQ,GAEpD,OAAO,sBAAK1D,UAAWgB,IAAQ0C,KAAMC,MAAOA,EAArC,UACL,4BAAID,IACJ,uBAAM1D,UAAWgB,IAAQzG,MAAzB,eAAmCsJ,OAAO9B,EAAMtH,OAAO4B,SAAS,IAAIyH,iBAClE/B,EAAMY,KAAO,sBAAM3C,UAAWgB,IAAQ+C,UAAzB,SAAqCJ,OAOxD,SAASN,GAAOtB,GACd,GAAG0B,MAAM1B,EAAMtH,OAAQ,OAAO,KAE9B,IACE,IAAM+E,EAAQ,YAAIpE,IAAK0C,OAAO7C,OAAOS,cAAcqG,EAAMtH,SAASG,KAAI,SAAAC,GAAC,OAAIA,EAAEC,WAAW,MAExF,OAAO,qBAAKkF,UAAWgB,IAAQgD,KAAMnD,MAAO,CAAEoD,YAAa,GAApD,SACJzE,EAAM5E,KAAI,SAACuE,EAAG1B,GAAJ,OAAU,+BAAe0B,EAAE9C,SAAS,IAAIC,SAAS,EAAE,MAA9BmB,QAElC,MAAOnC,GACP,QAOJ,SAASkI,GAAazB,GACpB,GAAG0B,MAAM1B,EAAMtH,OAAQ,OAAO,KAE9B,IACE,IAAM+E,EAAQ,YAAIpE,IAAK0C,OAAO7C,OAAOS,cAAcqG,EAAMtH,SAASG,KAAI,SAAAC,GAAC,OAAIA,EAAEC,WAAW,MAExF,OAAO,qBAAKkF,UAAWgB,IAAQgD,KAAO,IAAMhD,IAAQkD,WAAYrD,MAAO,CAAEoD,YAAa,GAA/E,SACJzE,EAAM5E,KAAI,SAACuE,EAAG1B,EAAGyB,GAChB,IACIiF,EAAYC,EADVC,EAAUlF,EAAE9C,SAAS,GAAGC,SAAS,EAAG,KAc1C,OAZiB,IAAb4C,EAAExE,QACJyJ,EAAaE,EAAQzF,OAAO,EAAG,GAC/BwF,EAAWC,EAAQzF,OAAO,IAEhB,IAANnB,GACF0G,EAAaE,EAAQzF,OAAO,EAAGM,EAAExE,OAAS,GAC1C0J,EAAWC,EAAQzF,OAAOM,EAAExE,OAAS,KAErCyJ,EAAaE,EAAQzF,OAAO,EAAE,GAC9BwF,EAAWC,EAAQzF,OAAO,IAGvB,iCACL,sBAAMoB,UAAWgB,IAAQmD,WAAzB,SAAsCA,IACtC,sBAAMnE,UAAWgB,IAAQoD,SAAzB,SAAoCA,MAFpB3G,QAMtB,MAAOnC,GACP,Q,MCnNW,SAASgJ,GAAT,GAAmC,IAAbC,EAAY,EAAZA,SACjC,EAA4BjE,mBAAS,IAArC,mBAAQ7F,EAAR,KAAe+J,EAAf,KACA,EAAwBlE,mBAAS,MAAjC,mBAAQqC,EAAR,KAAaC,EAAb,KAEAC,qBAAU,WACFpI,IAAUkI,GAL2B,mCAMrC8B,KAEL,CAAC9B,EAAKlI,IAET,IAAMiK,EAAUjK,EAAMC,QAAU,EA8BpC,SAAoBiI,EAAKlI,GAAmB,IAAZkK,EAAW,uDAAL,IAC5BnG,EAAM,GACNoG,EAAQ,GAEd,IAAKjC,EACD,MAAO,GAGX,IAGI,IAFA,IAAMkC,EAAM,IAAIC,OAAOrK,EAAO,KAErBgD,EAAI,EAAGA,EAAIkF,EAAIoC,kBAAkBrK,QAAU8D,EAAI9D,OAASiK,EAAOlH,IAAK,CACzE,IAAMuH,EAAOrC,EAAIoC,kBAAkBtH,GAC/BuH,GAAQH,EAAI7I,KAAKgJ,KACjBxG,EAAIb,KAAK,CAAEmB,UAAWrB,EAAGuH,SACzBJ,EAAMjH,KAAKF,KAIvB,MAAOnC,IAEP,GAAIkD,EAAI9D,OAASiK,GAASlK,EAAMwK,SAAS,KAGrC,IAFA,IAAMC,EAAczK,EAAMqJ,cAAcjI,MAAM,KADH,WAGlC4B,GACL,IAAMuH,EAAOrC,EAAIoC,kBAAkBtH,GAC/BuH,GAAQE,EAAYpJ,OAAM,SAAAmD,GAAC,OAAI+F,EAAKC,SAAShG,QAAQ2F,EAAMK,SAASxH,IACpEe,EAAIb,KAAK,CAAEmB,UAAWrB,EAAGuH,UAHxBvH,EAAI,EAAGA,EAAIkF,EAAIoC,kBAAkBrK,QAAU8D,EAAI9D,OAASiK,EAAOlH,IAAM,EAArEA,GAQb,OAAOe,EA9D6B2G,CAAUxC,EAAKlI,GAAS,GAE5D,OACI,sBAAKuF,UAAU,YAAf,UACI,uBAAOoF,KAAK,SAAS3K,MAAOA,EAAO4K,SAAU,SAAA/J,GAAC,OAAIkJ,EAASlJ,EAAEgK,OAAO7K,QAAQ8K,YAAY,WACxF,qBAAIvF,UAAU,iBAAd,UACM0E,EAAQ9J,KAAI,SAAA4K,GAAC,OACX,qBAAsB/E,QAAS,WAAQ+D,EAAS,IAAKD,EAASiB,EAAE1G,YAAhE,UAAgF0G,EAAER,KAAlF,IAAyF/J,OAAOS,cAAc8J,EAAE1G,aAAvG0G,EAAE1G,cAEb4F,EAAQhK,OAAS,GAAK,oBAAIsF,UAAU,qBAAqBS,QAAS,WAAQ+D,EAAS,IAAKE,EAAQe,SAAQ,SAAAD,GAAC,OAAIjB,EAASiB,EAAE1G,eAAlG,uBAnBS,4CAwB7C,8BAAAI,EAAA,sEACiC,iCADjC,iBACmByD,EADnB,EACUI,SAGFa,QAAQ,KAEZhB,EAAOD,GANX,2CAxB6C,yBCFjD,IAEqB+C,G,kDACnB,WAAa3D,GAAQ,IAAD,8BAClB,cAAMA,IAKRsD,SAAW,SAAC/J,GACV,EAAKkJ,SAASlJ,EAAEgK,OAAO7K,QAJvB,EAAKkL,MAAQC,KAHK,E,4CAUpB,SAAUnL,GAAkC,IAA3BoL,EAA0B,uDAAnB1H,KAAKwH,MAAME,OACjC1H,KAAK2H,SAAS,CAAErL,QAAOoL,a,sEAGzB,iCAAA3G,EAAA,sDACE6G,OAAOC,iBAAiB,cAAc,WACpC,EAAKF,SAASF,SAGhBzH,KAAK8H,SAASC,QALhB,gD,mFAWA,SAAiBpH,GACfX,KAAK2H,UAAS,SAAAK,GACZ,IAAM1L,EAAmB0L,EAAnB1L,MAAOoL,EAAYM,EAAZN,OAEPrH,EAAM2D,EAAQ0D,GAAQnK,cAAcoD,GAgB1C,MAde,QAAX+G,EACFpL,GAAS+D,EACW,QAAXqH,GAEW,YAAXA,GAEW,SAAXA,EAHTpL,GAAS,IAAM+D,GAKK,YAAXqH,GAEW,YAAXA,KADTpL,GAAS+D,GAKJ,CAAE/D,c,gCAIb,WACE,MAA0B0D,KAAKwH,MAAvBlL,EAAR,EAAQA,MAAOoL,EAAf,EAAeA,OAEfE,OAAOK,SAASC,KAAhB,UAA0BR,EAA1B,YAAoC5H,mBAAmBxD,IAEvD,IAAM6L,EAAKnE,EAAQhE,KAAKwH,MAAME,QAC3BS,EAAG9L,QAAQC,KACZqF,SAAS6D,MAAT,UA3DQ,UA2DR,cAA+B1I,OAAOS,cAAP,MAAAT,OAAM,YAAkBqL,EAAG/K,MAAMd,S,oBAIpE,WAAW,IAAD,OACR,EAA0B0D,KAAKwH,MAAvBlL,EAAR,EAAQA,MAAOoL,EAAf,EAAeA,OAEf,KAAMA,KAAU1D,GACd,OAAO,+DAIT,IAAMoE,EAAYpE,EAAQ0D,GAEpBrL,EAAU+L,EAAU/L,QAAQC,GAE9B+C,EAAahD,EAAU+L,EAAUhL,MAAMd,GAAS,GAEpD,OACE,sBAAKuF,UAAWgB,IAAQwF,UAAxB,UACE,uBACEpB,KAAK,OACL3K,MAAOA,EACP4K,SAAUlH,KAAKkH,SACfrF,UAAWgB,IAAQyF,MACnB5F,MAAO,CAAC6F,OAAQlM,EAAU,GAAK,kBAC/BmM,IAAK,SAAAA,GAAG,OAAI,EAAKV,SAAWU,KAE9B,cAAC,GAAD,CAAWpC,SAAU,SAAuB7G,GAAvB,OAA8B,EAAKkJ,gBAAgBlJ,MACxE,sBAAKsC,UAAWgB,IAAQ6F,eAAxB,UACE,sBAAK7G,UAAWgB,IAAQ8F,eAAxB,UACE,oBAAI9G,UAAWgB,IAAQ+F,cAAvB,kCACA,oBAAI/G,UAAWgB,IAAQgG,UAAvB,SAEIC,OAAOC,KAAK/E,GAASvH,KAAI,SAAAuM,GACvB,IACE,IAAIC,EAAapG,IAAQqG,YAEnBC,EAAKnF,EAAQgF,GACb3M,EAAU8M,EAAG9M,QAAQC,GAU3B,OARKD,IACH4M,GAAc,IAAMpG,IAAQuG,cAG1BJ,IAAQtB,IACVuB,GAAc,IAAMpG,IAAQwG,eAI5B,qBAEExH,UAAWoH,EACX3G,QAASjG,EAAW,kBAAM,EAAKgK,SAAS/J,EAAO0M,SAAQM,EAHzD,UAKGH,EAAG/M,MACFC,GAAW,4BAAIS,OAAOS,cAAP,MAAAT,OAAM,YAAkBqM,EAAG/L,MAAMd,SAL7C0M,GAQT,MAAO7L,GAEP,OADAoM,QAAQC,MAAMrM,GACP,gCAMjB,sBAAK0E,UAAWgB,IAAQ4G,gBAAiB/G,MAAO,CAACoC,KAAK,GAAtD,UACE,oBAAIjD,UAAWgB,IAAQ+F,cAAvB,yBACEvM,GACA,cAACgI,EAAD,CAAYhF,WAAYA,EAAY0C,SAAqB,QAAX2F,EAAmB,KAAO,SAACpL,GAAD,OAAW,EAAK+J,SAAS/J,EAAMqJ,cAAe,aAG1H,sBAAK9D,UAAWgB,IAAQ4G,gBAAxB,UACE,oBAAI5H,UAAWgB,IAAQ+F,cAAvB,oBACEvM,GACA,qBAAIwF,UAAWgB,IAAQ6G,OAAvB,UACE,6BAAI,cAAC/F,EAAD,CAActE,WAAYA,EAAY0C,SAAqB,QAAX2F,EAAmB,KAAO,SAACpL,GAAD,OAAW,EAAK+J,SAAS/J,EAAO,YAC9G,6BAAI,cAAC2I,EAAD,CAAW5F,WAAYA,EAAY0C,SAAqB,SAAX2F,EAAoB,KAAO,SAACpL,GAAD,OAAW,EAAK+J,SAAS/J,EAAO,aAC5G,6BAAI,cAAC6I,GAAD,CAAY9F,WAAYA,EAAY0C,SAAqB,WAAX2F,EAAsB,KAAO,SAACpL,GAAD,OAAW,EAAK+J,SAAS/J,EAAO,eAC/G,6BAAI,cAAC6H,EAAD,CAAe9E,WAAYA,EAAY0C,SAAqB,YAAX2F,EAAuB,KAAO,SAACpL,GAAD,OAAW,EAAK+J,SAAS/J,EAAO,gBACnH,6BAAI,cAACwH,EAAD,CAAezE,WAAYA,EAAY0C,SAAqB,YAAX2F,EAAuB,KAAO,SAACpL,GAAD,OAAW,EAAK+J,SAAS/J,EAAO,gBACnH,6BAAI,cAAC4H,EAAD,CAAkB7E,WAAYA,EAAY0C,SAAqB,eAAX2F,EAA0B,KAAO,SAACpL,GAAD,OAAW,EAAK+J,SAAS/J,EAAO,mBACzH,6BAAI,cAAC2H,EAAD,CAAe5E,WAAYA,EAAY0C,SAAqB,YAAX2F,EAAuB,KAAO,SAACpL,GAAD,OAAW,EAAK+J,SAAS/J,EAAO,gBACnH,6BAAI,cAAC8H,EAAD,CAAsB/E,WAAYA,EAAY0C,SAAqB,mBAAX2F,EAA8B,KAAO,SAACpL,GAAD,OAAW,EAAK+J,SAAS/J,EAAO,uC,GA7IhHqN,aAuJjC,SAASlC,KACP,IAAQS,EAASN,OAAOK,SAAhBC,KAER,IAAKA,EACH,MAAO,CACL5L,MAAO,GACPoL,OAAQ,OAIZ,IAAMpL,EAAQuD,mBAAmBqI,EAAKzH,OAAO,IAEvCmJ,EAAa,iBAAiBrJ,KAAKjE,GAEzC,OAAIsN,EACK,CACLlC,OAAQkC,EAAW,GACnBtN,MAAOA,EAAMmE,OAAOmJ,EAAW,GAAGrN,SAG7B,CACLD,QACAoL,OAAQ,O,MCjLdmC,IAASC,OAAO,cAAC,GAAD,IAASnI,SAASoI,eAAe,W","file":"static/js/main.5cfc2b3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__TGL_a\",\"input\":\"style_input__1olTI\",\"inOutContainer\":\"style_inOutContainer__2m058\",\"inputContainer\":\"style_inputContainer__3nP_q\",\"outputContainer\":\"style_outputContainer__XTFsH\",\"inputList\":\"style_inputList__fcgJu\",\"inputChoice\":\"style_inputChoice__2t21I\",\"selectedInput\":\"style_selectedInput__2fg-s\",\"invalidInput\":\"style_invalidInput__vm4Ps\",\"output\":\"style_output__3lwtp\",\"label\":\"style_label__1xfjy\",\"labelName\":\"style_labelName__2BYZd\",\"char\":\"style_char__289sC\",\"byte\":\"style_byte__2Z0Pr\",\"binaryByte\":\"style_binaryByte__3REd7\",\"bytePrefix\":\"style_bytePrefix__1bNcc\",\"byteData\":\"style_byteData__3TJIs\",\"switchInput\":\"style_switchInput__NWeoi\",\"codePointList\":\"style_codePointList__1JSmA\"};","import utf8 from 'utf8';\r\n\r\n// Undefined Windows-1252 bytes are replaced with the Unicode characters at that codepoint to aid conversion (e.g. 0x81, 0x8D, 0x8f, etc.)\r\nconst UPPER_HALF = \"€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\";\r\n\r\n/** @type {import('.').Format} */\r\nexport const windows1252 = {\r\n    label: \"UTF-8 (As Windows-1252)\",\r\n    isValid: (value) => {\r\n        if (value.length === 0) return true;\r\n\r\n        const bytes = [...value].map(c => c.charCodeAt(0) < 0x80 ? c.charCodeAt(0) : 0x80 + UPPER_HALF.indexOf(c));\r\n\r\n        const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\r\n\r\n        try {\r\n            utf8.decode(byteString);\r\n\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    },\r\n    parse (value) {\r\n        if (value.length === 0) return [];\r\n\r\n        const bytes = [...value].map(c => c.charCodeAt(0) < 0x80 ? c.charCodeAt(0) : 0x80 + UPPER_HALF.indexOf(c));\r\n\r\n        const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\r\n\r\n        try {\r\n            const string = utf8.decode(byteString);\r\n\r\n            const codepoints = [...string].map(x => x.codePointAt(0));\r\n\r\n            return codepoints;\r\n        } catch (e) {\r\n            return [];\r\n        }\r\n    },\r\n    fromCodePoint (...codePoints) {\r\n        return \"\";\r\n    }\r\n};\r\n\r\n/** @type {import('.').Format} */\r\nexport const windows1252Hex = {\r\n    label: \"Windows-1252 (Hexidecimal values)\",\r\n    isValid: (value) => {\r\n        if (value.length === 0) return true;\r\n        return value.trim().split(\" \").every(v => /^[a-f0-9]+$/i.test(v) && parseInt(v, 16) < 0x100);\r\n    },\r\n    parse (value) {\r\n        if (value.length === 0) return [];\r\n\r\n        const values = value.trim().split(\" \").map(v => parseInt(v, 16));\r\n\r\n        return values.map(v => v < 0x80 ? v : UPPER_HALF.codePointAt(v - 0x80));\r\n    },\r\n    fromCodePoint (...codePoints) {\r\n        return codePoints.map(c => {\r\n            let hex = 0;\r\n\r\n            if (c < 0x80) hex = c;\r\n            else {\r\n                const index = UPPER_HALF.indexOf(String.fromCodePoint(c));\r\n                if (index < 0) hex = c; // It's helpful if we just use the Unicode code point\r\n                else hex = 0x80 + index;\r\n            }\r\n\r\n            return hex.toString(16).padStart(2, \"0\");\r\n        }).join(\" \");\r\n    }\r\n};","\r\nconst taiwanTelegraphMapping = require('../data/TaiwanTelegraph.json');\r\nconst mainlandTelegraphMapping = require('../data/MainlandTelegraph.json');\r\n\r\nconst TAIWAN_MAX_CODE = 9798;\r\nconst MAINLAND_MAX_CODE = 9694;\r\n\r\n\r\n/** @type {import('.').Format} */\r\nexport const taiwanTelegraph = {\r\n    label: \"Chinese Telegraph Code (Traditional)\",\r\n    isValid (value) {\r\n        if (value.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        if (/[^\\d\\s]/.test(value)) {\r\n            return false;\r\n        }\r\n\r\n        return value.trim().split(\" \").map(v => parseInt(v, 10)).every(n => n >= 0 && n <= TAIWAN_MAX_CODE && taiwanTelegraphMapping[n]);\r\n    },\r\n    parse (value) {\r\n        if (value.trim().length === 0) {\r\n            return [];\r\n        }\r\n\r\n        return value.trim().split(\" \").map(v => taiwanTelegraphMapping[parseInt(v, 10)]);\r\n    },\r\n    fromCodePoint (...codePoints) {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n/** @type {import('.').Format} */\r\nexport const mainlandTelegraph = {\r\n    label: \"Chinese Telegraph Code (Simplified)\",\r\n    isValid (value) {\r\n        if (value.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        if (/[^\\d\\s]/.test(value)) {\r\n            return false;\r\n        }\r\n\r\n        return value.trim().split(\" \").map(v => parseInt(v, 10)).every(n => n >= 0 && n <= MAINLAND_MAX_CODE && mainlandTelegraphMapping[n]);\r\n    },\r\n    parse (value) {\r\n        if (value.trim().length === 0) {\r\n            return [];\r\n        }\r\n\r\n        return value.trim().split(\" \").map(v => mainlandTelegraphMapping[parseInt(v, 10)]);\r\n    },\r\n    fromCodePoint (...codePoints) {\r\n        return \"\";\r\n    }\r\n}","const data = require('../data/big5.json');\r\n\r\n/** @type {import('.').Format} */\r\nexport const big5 = {\r\n    label: \"Big5 (Hexidecimal values)\",\r\n    isValid: (value) => {\r\n        if (value.length === 0) return true;\r\n        return value.trim().split(\" \").every(v => /^[a-f0-9]+$/i.test(v) && findRange(parseInt(v, 16)));\r\n    },\r\n    parse (value) {\r\n        if (value.length === 0) return [];\r\n\r\n        const values = value.trim().split(\" \").map(v => parseInt(v, 16));\r\n\r\n        return values.map(v => {\r\n            const range = findRange(v);\r\n            const delta = v - range.offset;\r\n            return range.chars[delta].charCodeAt(0);\r\n        });\r\n    },\r\n    fromCodePoint (...codePoints) {\r\n        return \"\";\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} hexValue\r\n */\r\nfunction findRange (hexValue) {\r\n    for (const range of data) {\r\n        const start = range.offset;\r\n        const end = start + range.chars.length;\r\n\r\n        if (start <= hexValue && hexValue < end) {\r\n            return range;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}","import u from 'utf8';\nimport he from 'he';\n/**\n * @typedef Format\n * @prop {string} label\n * @prop {(value: string) => boolean} isValid\n * @prop {(value: string) => number[]} parse\n * @prop {(...codePoints: number[]) => string} fromCodePoint\n */\n\n/** @type {Format} */\nexport const raw = {\n    label: \"Raw Characters\",\n    isValid: () => true,\n    parse (value) {\n        const raw = String(value);\n\n        const codepoints = [];\n\n        for (let i = 0; i < raw.length; i++) {\n            const cp = raw.codePointAt(i);\n            codepoints.push(cp);\n            if (cp > 0xffff) {\n                i++;\n            }\n        }\n\n        return codepoints;\n    },\n    fromCodePoint (...codePoints) {\n        return String.fromCodePoint(...codePoints);\n    }\n};\n\n/** @type {Format} */\nexport const encoded = {\n    label: \"HTML Encoded\",\n    isValid: () => true,\n    parse (value) {\n        return raw.parse(he.decode(String(value)));\n    },\n    fromCodePoint (...codePoints) {\n        return he.encode(String.fromCodePoint(...codePoints));\n    }\n};\n\n/** @type {Format} */\nexport const urlEncoded = {\n    label: \"URL Encoded\",\n    isValid: (value) => {\n        try {\n            [...decodeURIComponent(String(value))].map(c => c.charCodeAt(0));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        try {\n            return [...decodeURIComponent(String(value))].map(c => c.charCodeAt(0));\n        } catch (e) {\n            return [];\n        }\n    },\n    fromCodePoint (...codePoints) {\n        try {\n            return encodeURIComponent(String.fromCodePoint(...codePoints));\n        } catch (e) {\n            return \"\";\n        }\n    }\n};\n\n/** @type {Format} */\nexport const escaped = {\n    label: \"Escape Sequences\",\n    isValid (value) {\n        try {\n            const codepoints = this.parse(value);\n            return codepoints.every(x => x >= 0 && x < 0x110000);\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        /** @type {(string|string[]|number|number[])[]} */\n        let rawList = [value];\n\n        const regexes = [\n            /\\\\u{([0-9a-fA-F]+)}/g,\n            /\\\\u([0-9a-fA-F]{4})/g,\n            /\\\\U([0-9a-fA-F]{8})/g,\n        ];\n        for (const re of regexes) {\n            rawList = rawList.map(item => {\n                if (typeof item === \"string\") {\n                    const out = [];\n                    let match;\n                    let pos = 0;\n                    while (match = re.exec(item)) {\n                        if (match.index > pos) {\n                            out.push(item.substring(pos, match.index));\n                        }\n                        pos = match.index + match[0].length;\n                        out.push(parseInt(match[1], 16));\n                    }\n                    if (pos < item.length) out.push(item.substr(pos));\n                    return out;\n                }\n                return item;\n            });\n            rawList = flatten(rawList);\n        }\n\n        rawList = rawList.map(item => typeof item === \"string\" ? [...item].map(x => x.codePointAt(0)) : item);\n\n        const codepoints = flatten(rawList);\n\n        return codepoints;\n    },\n    fromCodePoint (...codePoints) {\n        return codePoints.map(codePoint =>\n            (codePoint >= 0x20 && codePoint < 0x80) ?\n                // Printable ASCII as-is\n                String.fromCodePoint(codePoint)\n                :\n                // Everything else escaped\n                (codePoint < 0xffff ? \"\\\\u\" + codePoint.toString(16).padStart(4, \"0\") : `\\\\u{${codePoint.toString(16)}}`)\n        ).join(\"\");\n    }\n};\n\n/** @type {Format} */\nexport const decimal = {\n    label: \"Code Point List (Decimal)\",\n    isValid (value) {\n        if (value.length === 0) {\n            return true;\n        }\n\n        if (value.match(/[^\\d ]/)) {\n            return false;\n        }\n\n        try {\n            const codepoints = decimal.parse(value);\n            return codepoints.every(x => x >= 0 && x < 0x110000);\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        const raw = value.replace(/[^\\d ]/g, \"\").trim().replace(/ +/g, \" \");\n\n        if (raw.length === 0) {\n            return [];\n        }\n\n        const codepoints = raw.split(\" \").map(x => parseInt(x, 10));\n\n        return codepoints;\n    },\n    fromCodePoint (...codePoints) {\n        return codePoints.map(cp => cp.toString(10)).join(\" \");\n    }\n};\n\n/** @type {Format} */\nexport const hex = {\n    label: \"Code Point List (Hexidecimal)\",\n    isValid (value) {\n        if (value.length === 0) {\n            return true;\n        }\n\n        if (value.match(/[^a-f\\d\\sU+-]/i)) {\n            return false;\n        }\n\n        try {\n            const codepoints = hex.parse(value);\n            return codepoints.every(x => x >= 0 && x < 0x110000);\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        const raw = value.replace(/[^\\da-f\\sU+-]/gi, \"\").trim().replace(/[,\\s]+/g, \" \");\n\n        if (raw.length === 0) {\n            return [];\n        }\n\n        const expanded = raw.replace(/([\\da-f]+)-([\\da-f]+)/gi, (s, a, b) => {\n            const start = parseInt(a, 16);\n            const end = parseInt(b, 16);\n\n            if (start >= end) {\n                throw RangeError(`Start must be less than end: ${start} < ${end}`);\n            }\n\n            if (end - start >= 0x1000) {\n                throw RangeError(`Too many code points: ${end - start}`);\n            }\n\n            return Array(end - start + 1).fill(0).map((x,i) => (i + start).toString(16)).join(\" \");\n        }).split(\" \");\n\n        const codepoints = expanded.map(p => p.replace(/^U\\+/, \"\")).map(x => parseInt(x, 16));\n\n        return codepoints;\n    },\n    fromCodePoint (...codePoints) {\n        return codePoints.map(cp => cp.toString(16)).join(\" \");\n    }\n};\n\n/** @type {Format} */\nexport const utf8 = {\n    label: \"UTF-8 Bytes\",\n    isValid (value) {\n        value = value.replace(/\\\\x/g, \"\");\n        if (!/^[\\da-f ,]*$/i.test(value)) {\n            return false;\n        }\n\n        try {\n            const raw = String(value).replace(/[ ,]/g, \"\");\n            if (raw.length % 2) {\n                return false;\n            }\n\n            const bytes = [];\n\n            for (let i = 0; i < raw.length; i += 2) {\n                bytes.push(parseInt(raw.substr(i,2), 16));\n            }\n\n            const byteString = String.fromCharCode(...bytes);\n            u.decode(byteString);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        const raw = String(value).replace(/\\\\x/g, \"\").replace(/ /g, \"\");\n        if (raw.length % 2) {\n            return [];\n        }\n\n        const bytes = [];\n\n        for (let i = 0; i < raw.length; i += 2) {\n            bytes.push(parseInt(raw.substr(i,2), 16));\n        }\n\n        const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\n\n        try {\n            const string = u.decode(byteString);\n\n            const codepoints = [...string].map(x => x.codePointAt(0));\n\n            return codepoints;\n        } catch (e) {\n            return [];\n        }\n    },\n    fromCodePoint (codePoints) {\n        return [...u.encode(String.fromCodePoint(...codePoints))].map(c => c.charCodeAt(0).toString(16).padStart(2, \"0\")).join(\" \");\n    }\n};\n\n/** @type {Format} */\nexport const binary = {\n    label: \"UTF-8 (Binary)\",\n    isValid (value) {\n        if (value.length === 0) {\n            return true;\n        }\n\n        if (/[^01 ]/.test(value)) {\n            return false;\n        }\n\n        const bytes = value.split(\" \").map(v => parseInt(v, 2));\n\n        const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\n\n        try {\n            u.decode(byteString);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        if (value.trim().length === 0) {\n            return [];\n        }\n\n        const bytes = value.trim().split(\" \").map(v => parseInt(v, 2));\n\n        const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\n\n        try {\n            const string = u.decode(byteString);\n\n            const codepoints = [...string].map(x => x.codePointAt(0));\n\n            return codepoints;\n        } catch (e) {\n            return [];\n        }\n    },\n    fromCodePoint (...codePoints) {\n        try {\n            const bytes = u.encode(String.fromCodePoint(...codePoints));\n            return [...bytes].map(b => b.charCodeAt(0).toString(2).padStart(8, \"0\")).join(\" \");\n        } catch (e) {\n            return \"\";\n        }\n    }\n}\n\n\nexport { windows1252, windows1252Hex } from './windows1252';\nexport { mainlandTelegraph, taiwanTelegraph } from './chineseTelegraph';\nexport { big5 } from './big5';\n\nconst flatten = arr => [].concat(...arr);","const div = document.createElement(\"div\");\r\ndiv.className = \"Toast\";\r\n\r\n/**\r\n * @param {string} message\r\n */\r\nexport function Toast (message) {\r\n    div.innerText = message;\r\n    document.body.appendChild(div);\r\n    setTimeout(() => {\r\n        try { document.body.removeChild(div); }\r\n        catch (e) {}\r\n    }, 10 * 1000);\r\n}","import React, { useState } from 'react';\nimport utf8 from 'utf8';\nimport he from 'he';\nimport * as formats from './formats';\nimport { Toast } from './Toast';\n\nimport classes from './App/style.module.css';\n\n/**\n * @param {string} string\n */\nfunction copyText (string) {\n  const el = document.createElement(\"textarea\");\n  el.value = string;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);\n}\n\nfunction CommonOutput ({ label, onSelect, string, children = null, copyable = false, defaultExpanded = false }) {\n  const [ expanded, setExpanded ] = useState(defaultExpanded);\n\n  return (\n    <div onClick={() => { document.getSelection().getRangeAt(0).collapsed && setExpanded(!expanded); }} style={{cursor:\"pointer\", padding: \"8px 0\"}}>\n      <p className={classes.label}>\n        { label }{' '}\n        { onSelect && <button className={classes.switchInput} onClick={e => { e.stopPropagation(); onSelect(string); }}>✎</button> }\n        { copyable && <button className={classes.switchInput} onClick={e => { e.stopPropagation(); copyText(string); Toast(\"Copied\"); }}>📋</button> }\n        <span style={{color: \"black\"}}>{expanded ? \"▼\" : \"◀\"}</span>\n      </p>\n      { expanded && (children || string) }\n    </div>\n  );\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function StringOutput (props) {\n  const str = String.fromCodePoint(...props.codepoints);\n  return <CommonOutput label=\"String\" onSelect={props.onSelect} string={str} copyable defaultExpanded />;\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function EncodedOutput (props) {\n  const str = he.encode(String.fromCodePoint(...props.codepoints), { useNamedReferences: true });\n  return <CommonOutput label={formats.encoded.label} onSelect={props.onSelect} string={str} />\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function EscapedOutput (props) {\n  const str = formats.escaped.fromCodePoint(...props.codepoints);\n  return <CommonOutput label={formats.escaped.label} onSelect={props.onSelect} string={str} />\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\n export function URLEncodedOutput (props) {\n  return <CommonOutput label={formats.urlEncoded.label} onSelect={props.onSelect} string={formats.urlEncoded.fromCodePoint(...props.codepoints)} />\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function DecimalOutput (props) {\n  return <CommonOutput label={formats.decimal.label} onSelect={props.onSelect} string={props.codepoints.join(\" \")} />\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function Windows1252HexOutput (props) {\n  return <CommonOutput label={formats.windows1252Hex.label} onSelect={props.onSelect} string={formats.windows1252Hex.fromCodePoint(...props.codepoints)} />\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function CodePoints ({ codepoints, onSelect }) {\n  const cpList = codepoints.map(cp => cp.toString(16)).join(\" \");\n  const [ ucd, setUCD ] = React.useState(null);\n\n  React.useEffect(() => {\n    if (codepoints.length && !ucd) {\n      import('ijmacd.ucd').then(({ default: ucd }) => {\n        setUCD(ucd);\n      });\n    }\n  }, [codepoints, ucd]);\n\n  return (\n    <div className={classes.codePointOutput} style={{flex:1}}>\n      <p className={classes.label}>\n        Code Points ({codepoints.length})\n        { onSelect && <button className={classes.switchInput} onClick={() => onSelect(cpList)}>✎</button> }\n      </p>\n      <div className={classes.codePointList}>\n        {\n          codepoints.map((x,i) => <Char value={x} key={i} ucd={ucd} />)\n        }\n      </div>\n    </div>\n  );\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function UTF8Bytes (props) {\n\n  try {\n    const encoded = utf8.encode(String.fromCodePoint(...props.codepoints));\n    const bytes = [...encoded].map(b => b.charCodeAt(0).toString(16).padStart(2,\"0\")).join(\" \");\n    const length = encoded.length;\n\n    return (\n      <CommonOutput\n        label={`UTF-8 (${length} ${length === 1 ? \"byte\" : \"bytes\"})`}\n        onSelect={props.onSelect}\n        string={bytes}\n      >\n        {\n          props.codepoints.map((x,i) => <Bytes value={x} key={i} />)\n        }\n      </CommonOutput>\n    );\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void;  }} props\n */\nexport function UTF8Binary (props) {\n  return (\n    <CommonOutput\n      label={`UTF-8 Bits`}\n      onSelect={props.onSelect}\n      string={formats.binary.fromCodePoint(...props.codepoints)}\n    >\n      <div style={{fontSize:\"1rem\"}}>\n        {\n          props.codepoints.map((x,i) => <BinaryBytes value={x} key={i} />)\n        }\n      </div>\n    </CommonOutput>\n  );\n}\n\n/**\n * @param {{ value: number; ucd: { getName: (char: string) => string; }; }} props\n */\nfunction Char (props) {\n  if(isNaN(props.value)) return null;\n\n  const char = String.fromCodePoint(props.value);\n  const title = props.ucd ? props.ucd.getName(char) : \"\";\n\n  return <div className={classes.char} title={title}>\n    <p>{char}</p>\n    <span className={classes.label}>U+{Number(props.value).toString(16).toUpperCase()}</span>\n    { props.ucd && <span className={classes.labelName}>{title}</span> }\n  </div>;\n}\n\n/**\n * @param {{ value: number; }} props\n */\nfunction Bytes (props) {\n  if(isNaN(props.value)) return null;\n\n  try {\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\n\n    return <div className={classes.byte} style={{ marginRight: 4 }}>\n      {bytes.map((b, i) => <span key={i}>{b.toString(16).padStart(2,'0')}</span>)}\n    </div>;\n  } catch (e) {\n    return;\n  }\n}\n\n/**\n * @param {{ value: number; }} props\n */\nfunction BinaryBytes (props) {\n  if(isNaN(props.value)) return null;\n\n  try {\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\n\n    return <div className={classes.byte + \" \" + classes.binaryByte} style={{ marginRight: 4 }}>\n      {bytes.map((b, i, a) => {\n        const bString = b.toString(2).padStart(8, '0');\n        let bytePrefix, byteData;\n        if (a.length === 1) {\n          bytePrefix = bString.substr(0, 1);\n          byteData = bString.substr(1);\n        } else {\n          if (i === 0) {\n            bytePrefix = bString.substr(0, a.length + 1);\n            byteData = bString.substr(a.length + 1);\n          } else  {\n            bytePrefix = bString.substr(0,2);\n            byteData = bString.substr(2);\n          }\n        }\n        return <span key={i}>\n          <span className={classes.bytePrefix}>{bytePrefix}</span>\n          <span className={classes.byteData}>{byteData}</span>\n        </span>;\n      })}\n    </div>\n  } catch (e) {\n    return;\n  }\n}","import { useState, useEffect } from 'react';\n\nimport \"./UCDSearch.css\";\n\n/**\n *\n * @param {object} props\n * @param {(codePoint: number) => void} props.onChoose\n * @returns\n */\nexport default function UCDSearch ({ onChoose }) {\n    const [ value, setValue ] = useState(\"\");\n    const [ ucd, setUCD ] = useState(null);\n\n    useEffect(() => {\n        if (value && !ucd) {\n            fetchUCD();\n        }\n    }, [ucd, value]);\n\n    const results = value.length >= 3 ? searchUCD(ucd, value) : [];\n\n    return (\n        <div className=\"UCDSearch\">\n            <input type=\"search\" value={value} onChange={e => setValue(e.target.value)} placeholder=\"Search\" />\n            <ul className=\"UCDSearch-list\">\n                { results.map(r => (\n                    <li key={r.codePoint} onClick={() => { setValue(\"\"); onChoose(r.codePoint); }}>{r.name} {String.fromCodePoint(r.codePoint)}</li>\n                )) }\n                { results.length > 0 && <li className=\"UCDSearch-LinkItem\" onClick={() => { setValue(\"\"); results.forEach(r => onChoose(r.codePoint)); }}>All</li> }\n            </ul>\n        </div>\n    )\n\n    async function fetchUCD() {\n        let { default: ucd } = await import('ijmacd.ucd');\n\n        // prime unicode data\n        ucd.getName(\"a\");\n\n        setUCD(ucd);\n    }\n}\n\n/**\n *\n * @param {{ characterNameList: string[] }} ucd\n * @param {string} value\n * @param {number} limit\n */\nfunction searchUCD (ucd, value, limit=100) {\n    const out = [];\n    const found = [];\n\n    if (!ucd) {\n        return [];\n    }\n\n    try {\n        const reg = new RegExp(value, \"i\");\n\n        for (let i = 0; i < ucd.characterNameList.length && out.length < limit; i++) {\n            const name = ucd.characterNameList[i];\n            if (name && reg.test(name)) {\n                out.push({ codePoint: i, name });\n                found.push(i);\n            }\n        }\n    }\n    catch (e) {}\n\n    if (out.length < limit && value.includes(\" \")) {\n        const searchParts = value.toUpperCase().split(\" \");\n\n        for (let i = 0; i < ucd.characterNameList.length && out.length < limit; i++) {\n            const name = ucd.characterNameList[i];\n            if (name && searchParts.every(s => name.includes(s)) && !found.includes(i)) {\n                out.push({ codePoint: i, name });\n            }\n        }\n    }\n\n    return out;\n}","import React, { Component } from 'react';\n\nimport * as formats from '../formats';\nimport { StringOutput, CodePoints, UTF8Bytes, UTF8Binary, EncodedOutput, EscapedOutput, URLEncodedOutput, DecimalOutput, Windows1252HexOutput } from '../output';\nimport UCDSearch from '../UCDSearch';\n\nimport classes from './style.module.css';\n\nconst TITLE = \"Unichar\";\n\nexport default class App extends Component {\n  constructor (props) {\n    super(props);\n\n    this.state = getHash();\n  }\n\n  onChange = (e) => {\n    this.setValue(e.target.value);\n  }\n\n  setValue (value, format=this.state.format) {\n    this.setState({ value, format });\n  }\n\n  async componentDidMount () {\n    window.addEventListener(\"hashchange\", () => {\n      this.setState(getHash());\n    });\n\n    this.inputRef.focus();\n  }\n\n  /**\n   * @param {number} codePoint\n   */\n  insertCodePoint (codePoint) {\n    this.setState(oldState => {\n      let { value, format }  = oldState;\n\n      const out = formats[format].fromCodePoint(codePoint);\n\n      if (format === \"raw\") {\n        value += out;\n      } else if (format === \"hex\") {\n        value += \" \" + out;\n      } else if (format === \"decimal\") {\n        value += \" \" + out;\n      } else if (format === \"utf8\") {\n        value += \" \" + out;\n      } else if (format === \"encoded\") {\n        value += out;\n      } else if (format === \"escaped\") {\n        value += out;\n      }\n\n      return { value };\n    });\n  }\n\n  componentDidUpdate () {\n    const { value, format } = this.state;\n\n    window.location.hash = `${format}:${encodeURIComponent(value)}`;\n\n    const ii = formats[this.state.format]\n    if(ii.isValid(value)) {\n      document.title = `${TITLE} - ${String.fromCodePoint(...ii.parse(value))}`;\n    }\n  }\n\n  render () {\n    const { value, format } = this.state;\n\n    if (!(format in formats)) {\n      return <p>Error: Bad input method chosen</p>;\n    }\n\n    /** @type {import('../formats').Format} */\n    const formatter = formats[format]\n\n    const isValid = formatter.isValid(value);\n\n    let codepoints = isValid ? formatter.parse(value) : [];\n\n    return (\n      <div className={classes.container}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={this.onChange}\n          className={classes.input}\n          style={{border: isValid ? \"\" : \"1px solid #f33\"}}\n          ref={ref => this.inputRef = ref}\n        />\n        <UCDSearch onChoose={(/** @type {number} */ cp) => this.insertCodePoint(cp)} />\n        <div className={classes.inOutContainer}>\n          <div className={classes.inputContainer}>\n            <h2 className={classes.sectionHeader}>Input Interpretation</h2>\n            <ul className={classes.inputList}>\n              {\n                Object.keys(formats).map(key => {\n                  try {\n                    let classNames = classes.inputChoice;\n                    /** @type {import('../formats').Format} */\n                    const ij = formats[key];\n                    const isValid = ij.isValid(value);\n\n                    if (!isValid) {\n                      classNames += \" \" + classes.invalidInput;\n                    }\n\n                    if (key === format) {\n                      classNames += \" \" + classes.selectedInput;\n                    }\n\n                    return (\n                      <li\n                        key={key}\n                        className={classNames}\n                        onClick={isValid ? (() => this.setValue(value, key)) : undefined}\n                      >\n                        {ij.label}\n                        { isValid && <p>{String.fromCodePoint(...ij.parse(value))}</p> }\n                      </li>\n                    );\n                  } catch (e) {\n                    console.debug(e);\n                    return \"Error decoding value\";\n                  }\n                })\n              }\n            </ul>\n          </div>\n          <div className={classes.outputContainer} style={{flex:1}}>\n            <h2 className={classes.sectionHeader}>Code Points</h2>\n            { isValid &&\n              <CodePoints codepoints={codepoints} onSelect={format === \"hex\" ? null : (value) => this.setValue(value.toUpperCase(), \"hex\")} />\n            }\n          </div>\n          <div className={classes.outputContainer}>\n            <h2 className={classes.sectionHeader}>Output</h2>\n            { isValid &&\n              <ul className={classes.output}>\n                <li><StringOutput codepoints={codepoints} onSelect={format === \"raw\" ? null : (value) => this.setValue(value, \"raw\")} /></li>\n                <li><UTF8Bytes codepoints={codepoints} onSelect={format === \"utf8\" ? null : (value) => this.setValue(value, \"utf8\")} /></li>\n                <li><UTF8Binary codepoints={codepoints} onSelect={format === \"binary\" ? null : (value) => this.setValue(value, \"binary\")} /></li>\n                <li><DecimalOutput codepoints={codepoints} onSelect={format === \"decimal\" ? null : (value) => this.setValue(value, \"decimal\")} /></li>\n                <li><EncodedOutput codepoints={codepoints} onSelect={format === \"encoded\" ? null : (value) => this.setValue(value, \"encoded\")} /></li>\n                <li><URLEncodedOutput codepoints={codepoints} onSelect={format === \"urlEncoded\" ? null : (value) => this.setValue(value, \"urlEncoded\")} /></li>\n                <li><EscapedOutput codepoints={codepoints} onSelect={format === \"escaped\" ? null : (value) => this.setValue(value, \"escaped\")} /></li>\n                <li><Windows1252HexOutput codepoints={codepoints} onSelect={format === \"windows1252Hex\" ? null : (value) => this.setValue(value, \"windows1252Hex\")} /></li>\n              </ul>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction getHash () {\n  const { hash } = window.location;\n\n  if (!hash) {\n    return {\n      value: \"\",\n      format: \"raw\"\n    };\n  }\n\n  const value = decodeURIComponent(hash.substr(1));\n\n  const inputMatch = /^([a-z0-9]+):/i.exec(value);\n\n  if (inputMatch) {\n    return {\n      format: inputMatch[1],\n      value: value.substr(inputMatch[0].length),\n    };\n  } else {\n    return {\n      value,\n      format: \"raw\",\n    };\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './Toast.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}