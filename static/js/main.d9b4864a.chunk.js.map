{"version":3,"sources":["App/style.module.css","input.js","output.jsx","UCDSearch.jsx","App/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","container","input","inOutContainer","inputContainer","outputContainer","inputList","inputChoice","selectedInput","invalidInput","output","label","labelName","char","byte","binaryByte","bytePrefix","byteData","switchInput","raw","isValid","parse","value","String","codepoints","i","length","cp","codePointAt","push","encoded","he","decode","decimal","test","every","x","e","trim","replace","split","map","parseInt","hex","s","a","b","start","end","RangeError","concat","Array","fill","toString","join","p","utf8","bytes","substr","byteString","fromCharCode","apply","u","string","Object","toConsumableArray","StringOutput","props","str","fromCodePoint","react_default","createElement","className","classes","onSelect","onClick","el","document","body","appendChild","select","execCommand","removeChild","copyText","EncodedOutput","encode","useNamedReferences","CodePoints","cpList","Char","key","ucd","UTF8Bytes","charCodeAt","padStart","Bytes","UTF8Binary","BinaryBytes","isNaN","title","getName","Number","toUpperCase","c","style","marginRight","bString","src_UCDSearch","_ref","onChoose","_React$useState","React","useState","_React$useState2","slicedToArray","setValue","results","limit","arguments","undefined","out","reg","RegExp","characterNameList","name","codePoint","searchUCD","type","onChange","target","r","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","getHash","inputInterpretation","_this2","setState","window","location","hash","ii","addEventListener","_this3","__webpack_require__","then","t","bind","default","_this4","_this$state","border","sectionHeader","keys","classNames","ij","Component","decodeURIComponent","Boolean","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d9b4864a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__3_DMp\",\"input\":\"style_input__1YW7l\",\"inOutContainer\":\"style_inOutContainer__3h3wy\",\"inputContainer\":\"style_inputContainer__32pb4\",\"outputContainer\":\"style_outputContainer__1PfUU\",\"inputList\":\"style_inputList__3kt0A\",\"inputChoice\":\"style_inputChoice__39L7a\",\"selectedInput\":\"style_selectedInput__bIBmO\",\"invalidInput\":\"style_invalidInput__2qTGo\",\"output\":\"style_output__3pnKu\",\"label\":\"style_label__l4NLQ\",\"labelName\":\"style_labelName__jl-bL\",\"char\":\"style_char__s_0jS\",\"byte\":\"style_byte__37Hub\",\"binaryByte\":\"style_binaryByte__1K0G0\",\"bytePrefix\":\"style_bytePrefix__1gPwZ\",\"byteData\":\"style_byteData__TnKXT\",\"switchInput\":\"style_switchInput__3HbNV\"};","import u from 'utf8';\r\nimport he from 'he';\r\n\r\n/**\r\n * @typedef Interpreter\r\n * @prop {string} label\r\n * @prop {(s: string) => boolean} isValid\r\n * @prop {(s: string) => number[]} parse\r\n */\r\n\r\n/** @type {Interpreter} */\r\nexport const raw = {\r\n    label: \"Raw Characters\",\r\n    isValid: () => true,\r\n    parse (value) {\r\n        const raw = String(value);\r\n      \r\n        const codepoints = [];\r\n      \r\n        for (let i = 0; i < raw.length; i++) {\r\n            const cp = raw.codePointAt(i);\r\n            codepoints.push(cp);\r\n            if (cp > 0xffff) {\r\n                i++;\r\n            }\r\n        }\r\n      \r\n        return codepoints;\r\n    },\r\n};\r\n\r\n/** @type {Interpreter} */\r\nexport const encoded = {\r\n    label: \"Encoded String\",\r\n    isValid: () => true,\r\n    parse (value) {\r\n        return raw.parse(he.decode(value));\r\n    },\r\n};\r\n\r\n/** @type {Interpreter} */\r\nexport const decimal = {\r\n    label: \"Code Point List (Decimal)\",\r\n    isValid (value) {\r\n        if(!/^[\\d ]*$/.test(value)) {\r\n            return false;\r\n        }\r\n    \r\n        try {\r\n            const codepoints = decimal.parse(value);\r\n            return codepoints.every(x => x >= 0 && x < 0x110000);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    },\r\n    parse (value) {\r\n        const raw = String(value).trim().replace(/ +/g, \" \").split(\" \");\r\n      \r\n        const codepoints = raw.map(x => parseInt(x, 10));\r\n      \r\n        return codepoints;\r\n    },\r\n};\r\n\r\n/** @type {Interpreter} */\r\nexport const hex = {\r\n    label: \"Code Point List (Hexidecimal)\",\r\n    isValid (value) {\r\n        if (!/^ *((U\\+)?[\\da-f-]+,? *)*$/i.test(value)) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const codepoints = hex.parse(value);\r\n            return codepoints.every(x => x >= 0 && x < 0x110000);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    },\r\n    parse (value) {\r\n        const raw = String(value).trim().replace(/[,\\s]+/g, \" \");\r\n\r\n        const expanded = raw.replace(/([\\da-f]+)-([\\da-f]+)/g, (s, a, b) => {\r\n            const start = parseInt(a, 16);\r\n            const end = parseInt(b, 16);\r\n\r\n            if (start >= end) {\r\n                throw RangeError(`Start must be less than end: ${start} < ${end}`);\r\n            }\r\n\r\n            return Array(end - start + 1).fill(0).map((x,i) => (i + start).toString(16)).join(\" \");\r\n        }).split(\" \");\r\n      \r\n        const codepoints = expanded.map(p => p.replace(/^U\\+/, \"\")).map(x => parseInt(x, 16));\r\n      \r\n        return codepoints;\r\n    },\r\n};\r\n\r\n/** @type {Interpreter} */\r\nexport const utf8 = {\r\n    label: \"UTF-8 Bytes\",\r\n    isValid (value) {\r\n        if (!/^[\\da-f ,]*$/i.test(value)) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const raw = String(value).replace(/[ ,]/g, \"\");\r\n            if (raw.length % 2) {\r\n            return false;\r\n            }\r\n\r\n            const bytes = [];\r\n\r\n            for (let i = 0; i < raw.length; i += 2) {\r\n            bytes.push(parseInt(raw.substr(i,2), 16));\r\n            }\r\n\r\n            const byteString = String.fromCharCode(...bytes);\r\n            u.decode(byteString);\r\n\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    },\r\n    parse (value) {\r\n        const raw = String(value).replace(/ /g, \"\");\r\n        if (raw.length % 2) {\r\n            return [];\r\n        }\r\n        \r\n        const bytes = [];\r\n        \r\n        for (let i = 0; i < raw.length; i += 2) {\r\n            bytes.push(parseInt(raw.substr(i,2), 16));\r\n        }\r\n        \r\n        const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\r\n        \r\n        try {\r\n            const string = u.decode(byteString);\r\n        \r\n            const codepoints = [...string].map(x => x.codePointAt(0));\r\n        \r\n            return codepoints;\r\n        } catch (e) {\r\n            return [];\r\n        }\r\n    }\r\n};","import React from 'react';\r\nimport utf8 from 'utf8';\r\nimport he from 'he';\r\n\r\nimport classes from './App/style.module.css';\r\n\r\n/**\r\n * @param {string} string\r\n */\r\nfunction copyText (string) {\r\n  const el = document.createElement(\"textarea\");\r\n  el.value = string;\r\n  document.body.appendChild(el);\r\n  el.select();\r\n  document.execCommand(\"copy\");\r\n  document.body.removeChild(el);\r\n}\r\n\r\n/**\r\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\r\n */\r\nexport function StringOutput (props) {\r\n  const str = String.fromCodePoint(...props.codepoints);\r\n  return (\r\n    <div>\r\n      <p className={classes.label}>\r\n        String\r\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(str)}>➔</button> }\r\n        <button className={classes.switchInput} onClick={() => copyText(str)}>📋</button>\r\n      </p>\r\n      { str }\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\r\n */\r\nexport function EncodedOutput (props) {\r\n  const str = he.encode(String.fromCodePoint(...props.codepoints), { useNamedReferences: true });\r\n  return (\r\n    <div>\r\n      <p className={classes.label}>\r\n        Encoded\r\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(str)}>➔</button> }\r\n      </p>\r\n      { str }\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; ucd: any; }} props\r\n */\r\nexport function CodePoints (props) {\r\n  const cpList = props.codepoints.map(cp => `U+${cp.toString(16)}`).join(\" \");\r\n\r\n  return (\r\n    <div>\r\n      <p className={classes.label}>\r\n        Code Points ({props.codepoints.length})\r\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(cpList)}>➔</button> }\r\n      </p>\r\n      {\r\n        props.codepoints.map((x,i) => <Char value={x} key={i} ucd={props.ucd} />)\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\r\n */\r\nexport function UTF8Bytes (props) {\r\n\r\n  const bytes = [...utf8.encode(String.fromCodePoint(...props.codepoints))].map(b => b.charCodeAt(0).toString(16).padStart(2,\"0\")).join(\" \");\r\n  const length = utf8.encode(String.fromCodePoint(...props.codepoints)).length;\r\n\r\n  return (\r\n    <div>\r\n      <p className={classes.label}>\r\n        UTF-8 ({length} {length === 1 ? \"byte\" : \"bytes\"})\r\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(bytes)}>➔</button> }\r\n      </p>\r\n      {\r\n        props.codepoints.map((x,i) => <Bytes value={x} key={i} />)\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * @param {{ codepoints: number[]; }} props\r\n */\r\nexport function UTF8Binary (props) {\r\n  return <div>\r\n    <div className={classes.label}>UTF-8 Bits</div>\r\n    {\r\n      props.codepoints.map((x,i) => <BinaryBytes value={x} key={i} />)\r\n    }\r\n  </div>\r\n}\r\n\r\n/**\r\n * @param {{ value: number; ucd: { getName: (char: string) => string; }; }} props\r\n */\r\nfunction Char (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  const char = String.fromCodePoint(props.value);\r\n  const title = props.ucd ? props.ucd.getName(char) : \"\";\r\n\r\n  return <div className={classes.char} title={title}>\r\n    <p>{char}</p>\r\n    <span className={classes.label}>U+{Number(props.value).toString(16).toUpperCase()}</span>\r\n    { props.ucd && <span className={classes.labelName}>{title}</span> }\r\n  </div>;\r\n}\r\n\r\n/**\r\n * @param {{ value: number; }} props\r\n */\r\nfunction Bytes (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  try {\r\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\r\n\r\n    return <div className={classes.byte} style={{ marginRight: 4 }}>\r\n      {bytes.map((b, i) => <span key={i}>{b.toString(16).padStart(2,'0')}</span>)}\r\n    </div>;\r\n  } catch (e) {\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {{ value: number; }} props\r\n */\r\nfunction BinaryBytes (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  try {\r\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\r\n\r\n    return <div className={classes.byte + \" \" + classes.binaryByte} style={{ marginRight: 4 }}>\r\n      {bytes.map((b, i, a) => {\r\n        const bString = b.toString(2).padStart(8, '0');\r\n        let bytePrefix, byteData;\r\n        if (a.length === 1) {\r\n          bytePrefix = bString.substr(0, 1);\r\n          byteData = bString.substr(1);\r\n        } else {\r\n          if (i === 0) {\r\n            bytePrefix = bString.substr(0, a.length + 1);\r\n            byteData = bString.substr(a.length + 1);\r\n          } else  {\r\n            bytePrefix = bString.substr(0,2);\r\n            byteData = bString.substr(2);\r\n          }\r\n        }\r\n        return <span key={i}>\r\n          <span className={classes.bytePrefix}>{bytePrefix}</span>\r\n          <span className={classes.byteData}>{byteData}</span>\r\n        </span>;\r\n      })}\r\n    </div>\r\n  } catch (e) {\r\n    return;\r\n  }\r\n}","import React from 'react';\r\n\r\nimport \"./UCDSearch.css\";\r\n\r\nexport default function ({ ucd, onChoose }) {\r\n    const [ value, setValue ] = React.useState(\"\");\r\n\r\n    const results = value.length >= 3 ? searchUCD(ucd, value) : [];\r\n\r\n    return (\r\n        <div className=\"UCDSearch\">\r\n            <label>Search <input type=\"search\" value={value} onChange={e => setValue(e.target.value)} /></label>\r\n            <ul className=\"UCDSearch-list\">\r\n                { results.map(r => (\r\n                    <li key={r.codePoint} onClick={() => { setValue(\"\"); onChoose(r.codePoint); }}>{r.name}</li>\r\n                )) }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction searchUCD (ucd, value, limit=20) {\r\n    const out = [];\r\n\r\n    const reg = new RegExp(value, \"i\");\r\n\r\n    for (let i = 0; i < ucd.characterNameList.length && out.length < limit; i++) {\r\n        const name = ucd.characterNameList[i];\r\n        if (name && reg.test(name)) {\r\n            out.push({ codePoint: i, name });\r\n        }\r\n    }\r\n\r\n    return out;\r\n}","import React, { Component } from 'react';\r\n\r\nimport * as input from '../input';\r\nimport { StringOutput, CodePoints, UTF8Bytes, UTF8Binary, EncodedOutput } from '../output';\r\nimport UCDSearch from '../UCDSearch';\r\n\r\nimport classes from './style.module.css';\r\n\r\nconst TITLE = \"Unichar\";\r\n\r\nexport default class App extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: getHash() || \"\",\r\n      inputInterpretation: \"raw\",\r\n      ucd: null,\r\n    };\r\n\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setValue(e.target.value);\r\n  }\r\n\r\n  setValue (value, inputInterpretation=this.state.inputInterpretation) {\r\n    this.setState({ value, inputInterpretation }, () => {\r\n      window.location.hash = value;\r\n\r\n      const ii = input[this.state.inputInterpretation]\r\n      if(ii.isValid(value)) {\r\n        document.title = `${TITLE} - ${String.fromCodePoint(...ii.parse(value))}`;\r\n      }\r\n    });\r\n  }\r\n\r\n  async componentDidMount () {\r\n    window.addEventListener(\"hashchange\", () => {\r\n      const value = getHash();\r\n      if (value !== this.state.value) {\r\n        const isCodePoint = /^U\\+[0-9a-f]+/i.test(value);\r\n        const inputInterpretation = isCodePoint ? \"hex\" : \"raw\";\r\n        this.setState({ value, inputInterpretation });\r\n      }\r\n    });\r\n\r\n    const { default: ucd } = await import('ijmacd.ucd');\r\n    // prime unicode data\r\n    ucd.getName(\"a\");\r\n    this.setState({ ucd });\r\n  }\r\n\r\n  render () {\r\n    const { value, inputInterpretation, ucd } = this.state;\r\n\r\n    if (!(inputInterpretation in input)) {\r\n      return <p>Error: Bad input method chosen</p>;\r\n    }\r\n\r\n    /** @type {import('../input').Interpreter} */\r\n    const ii = input[inputInterpretation]\r\n\r\n    const isValid = ii.isValid(value);\r\n\r\n    let codepoints = isValid ? ii.parse(value) : [];\r\n\r\n    return (\r\n      <div className={classes.container}>\r\n        <input\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={this.onChange}\r\n          className={classes.input}\r\n          style={{border: isValid ? \"\" : \"1px solid #f33\"}}\r\n        />\r\n        { ucd && <UCDSearch ucd={ucd} onChoose={cp => this.setState({ value: value + String.fromCodePoint(cp) })} /> }\r\n        <div className={classes.inOutContainer}>\r\n          <div className={classes.inputContainer}>\r\n            <h2 className={classes.sectionHeader}>Input Interpretation</h2>\r\n            <ul className={classes.inputList}>\r\n              {\r\n                Object.keys(input).map(key => {\r\n                  let classNames = classes.inputChoice;\r\n                  /** @type {import('../input').Interpreter} */\r\n                  const ij = input[key];\r\n                  const isValid = ij.isValid(value);\r\n\r\n                  if (!isValid) {\r\n                    classNames += \" \" + classes.invalidInput;\r\n                  }\r\n\r\n                  if (key === inputInterpretation) {\r\n                    classNames += \" \" + classes.selectedInput;\r\n                  }\r\n\r\n                  return (\r\n                    <li\r\n                      key={key}\r\n                      className={classNames}\r\n                      onClick={isValid ? (() => this.setState({ inputInterpretation: key })) : undefined}\r\n                    >\r\n                      {ij.label}\r\n                      { isValid && <p>{String.fromCodePoint(...ij.parse(value))}</p> }\r\n                    </li>\r\n                  );\r\n                })\r\n              }\r\n            </ul>\r\n          </div>\r\n          <div className={classes.outputContainer}>\r\n            <h2 className={classes.sectionHeader}>Output</h2>\r\n            { isValid &&\r\n              <ul className={classes.output}>\r\n                <li><StringOutput codepoints={codepoints} onSelect={inputInterpretation === \"raw\" ? false : (value) => this.setValue(value, \"raw\")} /></li>\r\n                <li><CodePoints codepoints={codepoints} ucd={ucd} onSelect={inputInterpretation === \"hex\" ? false : (value) => this.setValue(value.toUpperCase(), \"hex\")} /></li>\r\n                <li><UTF8Bytes codepoints={codepoints} onSelect={inputInterpretation === \"utf8\" ? false : (value) => this.setValue(value, \"utf8\")} /></li>\r\n                <li><UTF8Binary codepoints={codepoints} /></li>\r\n                <li><EncodedOutput codepoints={codepoints} onSelect={inputInterpretation === \"encoded\" ? false : (value) => this.setValue(value, \"encoded\")} /></li>\r\n              </ul>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getHash () {\r\n  const { hash } = window.location;\r\n\r\n  if (!hash) {\r\n    return null;\r\n  }\r\n\r\n  return decodeURIComponent(hash.substr(1));\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}