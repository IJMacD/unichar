{"version":3,"sources":["App/style.module.css","formats.js","Toast.js","output.jsx","UCDSearch.jsx","App/index.jsx","index.js"],"names":["module","exports","taiwanTelegraphMapping","require","mainlandTelegraphMapping","raw","label","isValid","parse","value","String","codepoints","i","length","cp","codePointAt","push","fromCodePoint","encoded","he","decode","encode","urlEncoded","decodeURIComponent","map","c","charCodeAt","e","codePoints","codePoint","u","toString","padStart","join","escaped","this","every","x","rawList","re","item","match","out","pos","exec","index","substring","parseInt","substr","flatten","decimal","replace","trim","split","hex","s","a","b","start","end","RangeError","Array","fill","p","utf8","test","bytes","byteString","fromCharCode","string","binary","v","taiwanTelegraph","n","mainlandTelegraph","arr","concat","div","document","createElement","className","CommonOutput","onSelect","children","copyable","defaultExpanded","useState","expanded","setExpanded","onClick","getSelection","getRangeAt","collapsed","style","cursor","padding","classes","switchInput","stopPropagation","message","el","body","appendChild","select","execCommand","removeChild","copyText","innerText","setTimeout","color","StringOutput","props","str","EncodedOutput","useNamedReferences","formats","EscapedOutput","URLEncodedOutput","DecimalOutput","CodePoints","cpList","React","ucd","setUCD","useEffect","then","default","codePointOutput","flex","codePointList","Char","UTF8Bytes","Bytes","UTF8Binary","fontSize","BinaryBytes","isNaN","char","title","getName","Number","toUpperCase","labelName","byte","marginRight","binaryByte","bytePrefix","byteData","bString","UCDSearch","onChoose","setValue","fetchUCD","results","limit","found","reg","RegExp","characterNameList","name","includes","searchParts","searchUCD","type","onChange","target","placeholder","r","TITLE","App","state","getHash","format","setState","window","location","hash","encodeURIComponent","ii","addEventListener","inputRef","focus","formatter","container","input","border","ref","insertCodePoint","inOutContainer","inputContainer","sectionHeader","inputList","Object","keys","key","classNames","inputChoice","ij","invalidInput","selectedInput","undefined","console","debug","outputContainer","output","Component","inputMatch","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8efae51e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__TGL_a\",\"input\":\"style_input__1olTI\",\"inOutContainer\":\"style_inOutContainer__2m058\",\"inputContainer\":\"style_inputContainer__3nP_q\",\"outputContainer\":\"style_outputContainer__XTFsH\",\"inputList\":\"style_inputList__fcgJu\",\"inputChoice\":\"style_inputChoice__2t21I\",\"selectedInput\":\"style_selectedInput__2fg-s\",\"invalidInput\":\"style_invalidInput__vm4Ps\",\"output\":\"style_output__3lwtp\",\"label\":\"style_label__1xfjy\",\"labelName\":\"style_labelName__2BYZd\",\"char\":\"style_char__289sC\",\"byte\":\"style_byte__2Z0Pr\",\"binaryByte\":\"style_binaryByte__3REd7\",\"bytePrefix\":\"style_bytePrefix__1bNcc\",\"byteData\":\"style_byteData__3TJIs\",\"switchInput\":\"style_switchInput__NWeoi\",\"codePointList\":\"style_codePointList__1JSmA\"};","import u from 'utf8';\nimport he from 'he';\n\nconst taiwanTelegraphMapping = require('./data/TaiwanTelegraph.json');\nconst mainlandTelegraphMapping = require('./data/MainlandTelegraph.json');\n\nconst TAIWAN_MAX_CODE = 9798;\nconst MAINLAND_MAX_CODE = 9694;\n\n/**\n * @typedef Format\n * @prop {string} label\n * @prop {(value: string) => boolean} isValid\n * @prop {(value: string) => number[]} parse\n * @prop {(...codePoints: number[]) => string} fromCodePoint\n */\n\n/** @type {Format} */\nexport const raw = {\n    label: \"Raw Characters\",\n    isValid: () => true,\n    parse (value) {\n        const raw = String(value);\n\n        const codepoints = [];\n\n        for (let i = 0; i < raw.length; i++) {\n            const cp = raw.codePointAt(i);\n            codepoints.push(cp);\n            if (cp > 0xffff) {\n                i++;\n            }\n        }\n\n        return codepoints;\n    },\n    fromCodePoint (...codePoints) {\n        return String.fromCodePoint(...codePoints);\n    }\n};\n\n/** @type {Format} */\nexport const encoded = {\n    label: \"HTML Encoded\",\n    isValid: () => true,\n    parse (value) {\n        return raw.parse(he.decode(String(value)));\n    },\n    fromCodePoint (...codePoints) {\n        return he.encode(String.fromCodePoint(...codePoints));\n    }\n};\n\n/** @type {Format} */\nexport const urlEncoded = {\n    label: \"URL Encoded\",\n    isValid: (value) => {\n        try {\n            [...decodeURIComponent(String(value))].map(c => c.charCodeAt(0));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        try {\n            return [...decodeURIComponent(String(value))].map(c => c.charCodeAt(0));\n        } catch (e) {\n            return [];\n        }\n    },\n    fromCodePoint (...codePoints) {\n        return codePoints.map(codePoint =>\n            (codePoint >= 0x20 && codePoint < 0x80) ?\n                // Printable ASCII as-is\n                String.fromCodePoint(codePoint)\n                :\n                // Everything else escaped\n                [...u.encode(String.fromCodePoint(codePoint))].map(c => \"%\" + c.charCodeAt(0).toString(16).padStart(2, \"0\")).join(\"\")\n        ).join(\"\");\n    }\n};\n\n/** @type {Format} */\nexport const escaped = {\n    label: \"Escape Sequences\",\n    isValid (value) {\n        try {\n            const codepoints = this.parse(value);\n            return codepoints.every(x => x >= 0 && x < 0x110000);\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        /** @type {(string|string[]|number|number[])[]} */\n        let rawList = [value];\n\n        const regexes = [\n            /\\\\u{([0-9a-fA-F]+)}/g,\n            /\\\\u([0-9a-fA-F]{4})/g,\n            /\\\\U([0-9a-fA-F]{8})/g,\n        ];\n        for (const re of regexes) {\n            rawList = rawList.map(item => {\n                if (typeof item === \"string\") {\n                    const out = [];\n                    let match;\n                    let pos = 0;\n                    while (match = re.exec(item)) {\n                        if (match.index > pos) {\n                            out.push(item.substring(pos, match.index));\n                        }\n                        pos = match.index + match[0].length;\n                        out.push(parseInt(match[1], 16));\n                    }\n                    if (pos < item.length) out.push(item.substr(pos));\n                    return out;\n                }\n                return item;\n            });\n            rawList = flatten(rawList);\n        }\n\n        rawList = rawList.map(item => typeof item === \"string\" ? [...item].map(x => x.codePointAt(0)) : item);\n\n        const codepoints = flatten(rawList);\n\n        return codepoints;\n    },\n    fromCodePoint (...codePoints) {\n        return codePoints.map(codePoint =>\n            (codePoint >= 0x20 && codePoint < 0x80) ?\n                // Printable ASCII as-is\n                String.fromCodePoint(codePoint)\n                :\n                // Everything else escaped\n                (codePoint < 0xffff ? \"\\\\u\" + codePoint.toString(16).padStart(4, \"0\") : `\\\\u{${codePoint.toString(16)}}`)\n        ).join(\"\");\n    }\n};\n\n/** @type {Format} */\nexport const decimal = {\n    label: \"Code Point List (Decimal)\",\n    isValid (value) {\n        if (value.length === 0) {\n            return true;\n        }\n\n        if (value.match(/[^\\d ]/)) {\n            return false;\n        }\n\n        try {\n            const codepoints = decimal.parse(value);\n            return codepoints.every(x => x >= 0 && x < 0x110000);\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        const raw = value.replace(/[^\\d ]/g, \"\").trim().replace(/ +/g, \" \");\n\n        if (raw.length === 0) {\n            return [];\n        }\n\n        const codepoints = raw.split(\" \").map(x => parseInt(x, 10));\n\n        return codepoints;\n    },\n    fromCodePoint (...codePoints) {\n        return codePoints.map(cp => cp.toString(10)).join(\" \");\n    }\n};\n\n/** @type {Format} */\nexport const hex = {\n    label: \"Code Point List (Hexidecimal)\",\n    isValid (value) {\n        if (value.length === 0) {\n            return true;\n        }\n\n        if (value.match(/[^a-f\\d\\sU+-]/i)) {\n            return false;\n        }\n\n        try {\n            const codepoints = hex.parse(value);\n            return codepoints.every(x => x >= 0 && x < 0x110000);\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        const raw = value.replace(/[^\\da-f\\sU+-]/gi, \"\").trim().replace(/[,\\s]+/g, \" \");\n\n        if (raw.length === 0) {\n            return [];\n        }\n\n        const expanded = raw.replace(/([\\da-f]+)-([\\da-f]+)/gi, (s, a, b) => {\n            const start = parseInt(a, 16);\n            const end = parseInt(b, 16);\n\n            if (start >= end) {\n                throw RangeError(`Start must be less than end: ${start} < ${end}`);\n            }\n\n            if (end - start >= 0x1000) {\n                throw RangeError(`Too many code points: ${end - start}`);\n            }\n\n            return Array(end - start + 1).fill(0).map((x,i) => (i + start).toString(16)).join(\" \");\n        }).split(\" \");\n\n        const codepoints = expanded.map(p => p.replace(/^U\\+/, \"\")).map(x => parseInt(x, 16));\n\n        return codepoints;\n    },\n    fromCodePoint (...codePoints) {\n        return codePoints.map(cp => cp.toString(16)).join(\" \");\n    }\n};\n\n/** @type {Format} */\nexport const utf8 = {\n    label: \"UTF-8 Bytes\",\n    isValid (value) {\n        value = value.replace(/\\\\x/g, \"\");\n        if (!/^[\\da-f ,]*$/i.test(value)) {\n            return false;\n        }\n\n        try {\n            const raw = String(value).replace(/[ ,]/g, \"\");\n            if (raw.length % 2) {\n                return false;\n            }\n\n            const bytes = [];\n\n            for (let i = 0; i < raw.length; i += 2) {\n                bytes.push(parseInt(raw.substr(i,2), 16));\n            }\n\n            const byteString = String.fromCharCode(...bytes);\n            u.decode(byteString);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        const raw = String(value).replace(/\\\\x/g, \"\").replace(/ /g, \"\");\n        if (raw.length % 2) {\n            return [];\n        }\n\n        const bytes = [];\n\n        for (let i = 0; i < raw.length; i += 2) {\n            bytes.push(parseInt(raw.substr(i,2), 16));\n        }\n\n        const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\n\n        try {\n            const string = u.decode(byteString);\n\n            const codepoints = [...string].map(x => x.codePointAt(0));\n\n            return codepoints;\n        } catch (e) {\n            return [];\n        }\n    },\n    fromCodePoint (codePoints) {\n        return [...u.encode(String.fromCodePoint(...codePoints))].map(c => c.charCodeAt(0).toString(16).padStart(2, \"0\")).join(\" \");\n    }\n};\n\n/** @type {Format} */\nexport const binary = {\n    label: \"UTF-8 (Binary)\",\n    isValid (value) {\n        if (value.length === 0) {\n            return true;\n        }\n\n        if (/[^01 ]/.test(value)) {\n            return false;\n        }\n\n        const bytes = value.split(\" \").map(v => parseInt(v, 2));\n\n        const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\n\n        try {\n            u.decode(byteString);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        if (value.trim().length === 0) {\n            return [];\n        }\n\n        const bytes = value.trim().split(\" \").map(v => parseInt(v, 2));\n\n        const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\n\n        try {\n            const string = u.decode(byteString);\n\n            const codepoints = [...string].map(x => x.codePointAt(0));\n\n            return codepoints;\n        } catch (e) {\n            return [];\n        }\n    },\n    fromCodePoint (...codePoints) {\n        const bytes = u.encode(String.fromCodePoint(...codePoints));\n        return [...bytes].map(b => b.charCodeAt(0).toString(2).padStart(8, \"0\")).join(\" \");\n    }\n}\n\n/** @type {Format} */\nexport const taiwanTelegraph = {\n    label: \"Chinese Telegraph Code (Traditional)\",\n    isValid (value) {\n        if (value.length === 0) {\n            return true;\n        }\n\n        if (/[^\\d\\s]/.test(value)) {\n            return false;\n        }\n\n        return value.trim().split(\" \").map(v => parseInt(v, 10)).every(n => n >= 0 && n <= TAIWAN_MAX_CODE);\n    },\n    parse (value) {\n        if (value.trim().length === 0) {\n            return [];\n        }\n\n        return value.trim().split(\" \").map(v => taiwanTelegraphMapping[parseInt(v, 10)]);\n    },\n    fromCodePoint (...codePoints) {\n        return \"\";\n    }\n}\n\n/** @type {Format} */\nexport const mainlandTelegraph = {\n    label: \"Chinese Telegraph Code (Simplified)\",\n    isValid (value) {\n        if (value.length === 0) {\n            return true;\n        }\n\n        if (/[^\\d\\s]/.test(value)) {\n            return false;\n        }\n\n        return value.trim().split(\" \").map(v => parseInt(v, 10)).every(n => n >= 0 && n <= MAINLAND_MAX_CODE);\n    },\n    parse (value) {\n        if (value.trim().length === 0) {\n            return [];\n        }\n\n        return value.trim().split(\" \").map(v => mainlandTelegraphMapping[parseInt(v, 10)]);\n    },\n    fromCodePoint (...codePoints) {\n        return \"\";\n    }\n}\n\nconst flatten = arr => [].concat(...arr);","const div = document.createElement(\"div\");\r\ndiv.className = \"Toast\";\r\n\r\n/**\r\n * @param {string} message\r\n */\r\nexport function Toast (message) {\r\n    div.innerText = message;\r\n    document.body.appendChild(div);\r\n    setTimeout(() => {\r\n        try { document.body.removeChild(div); }\r\n        catch (e) {}\r\n    }, 10 * 1000);\r\n}","import React, { useState } from 'react';\nimport utf8 from 'utf8';\nimport he from 'he';\nimport * as formats from './formats';\nimport { Toast } from './Toast';\n\nimport classes from './App/style.module.css';\n\n/**\n * @param {string} string\n */\nfunction copyText (string) {\n  const el = document.createElement(\"textarea\");\n  el.value = string;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);\n}\n\nfunction CommonOutput ({ label, onSelect, string, children = null, copyable = false, defaultExpanded = false }) {\n  const [ expanded, setExpanded ] = useState(defaultExpanded);\n\n  return (\n    <div onClick={() => { document.getSelection().getRangeAt(0).collapsed && setExpanded(!expanded); }} style={{cursor:\"pointer\", padding: \"8px 0\"}}>\n      <p className={classes.label}>\n        { label }{' '}\n        { onSelect && <button className={classes.switchInput} onClick={e => { e.stopPropagation(); onSelect(string); }}>✎</button> }\n        { copyable && <button className={classes.switchInput} onClick={e => { e.stopPropagation(); copyText(string); Toast(\"Copied\"); }}>📋</button> }\n        <span style={{color: \"black\"}}>{expanded ? \"▼\" : \"◀\"}</span>\n      </p>\n      { expanded && (children || string) }\n    </div>\n  );\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function StringOutput (props) {\n  const str = String.fromCodePoint(...props.codepoints);\n  return <CommonOutput label=\"String\" onSelect={props.onSelect} string={str} copyable defaultExpanded />;\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function EncodedOutput (props) {\n  const str = he.encode(String.fromCodePoint(...props.codepoints), { useNamedReferences: true });\n  return <CommonOutput label={formats.encoded.label} onSelect={props.onSelect} string={str} />\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function EscapedOutput (props) {\n  const str = formats.escaped.fromCodePoint(...props.codepoints);\n  return <CommonOutput label={formats.escaped.label} onSelect={props.onSelect} string={str} />\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\n export function URLEncodedOutput (props) {\n  return <CommonOutput label={formats.urlEncoded.label} onSelect={props.onSelect} string={formats.urlEncoded.fromCodePoint(...props.codepoints)} />\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function DecimalOutput (props) {\n  return <CommonOutput label={formats.decimal.label} onSelect={props.onSelect} string={props.codepoints.join(\" \")} />\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function CodePoints ({ codepoints, onSelect }) {\n  const cpList = codepoints.map(cp => `U+${cp.toString(16)}`).join(\" \");\n  const [ ucd, setUCD ] = React.useState(null);\n\n  React.useEffect(() => {\n    if (codepoints.length && !ucd) {\n      import('ijmacd.ucd').then(({ default: ucd }) => {\n        setUCD(ucd);\n      });\n    }\n  }, [codepoints, ucd]);\n\n  return (\n    <div className={classes.codePointOutput} style={{flex:1}}>\n      <p className={classes.label}>\n        Code Points ({codepoints.length})\n        { onSelect && <button className={classes.switchInput} onClick={() => onSelect(cpList)}>✎</button> }\n      </p>\n      <div className={classes.codePointList}>\n        {\n          codepoints.map((x,i) => <Char value={x} key={i} ucd={ucd} />)\n        }\n      </div>\n    </div>\n  );\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function UTF8Bytes (props) {\n\n  const encoded = utf8.encode(String.fromCodePoint(...props.codepoints));\n  const bytes = [...encoded].map(b => b.charCodeAt(0).toString(16).padStart(2,\"0\")).join(\" \");\n  const length = encoded.length;\n\n  return (\n    <CommonOutput\n      label={`UTF-8 (${length} ${length === 1 ? \"byte\" : \"bytes\"})`}\n      onSelect={props.onSelect}\n      string={bytes}\n    >\n      {\n        props.codepoints.map((x,i) => <Bytes value={x} key={i} />)\n      }\n    </CommonOutput>\n  );\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void;  }} props\n */\nexport function UTF8Binary (props) {\n  return (\n    <CommonOutput\n      label={`UTF-8 Bits`}\n      onSelect={props.onSelect}\n      string={formats.binary.fromCodePoint(...props.codepoints)}\n    >\n      <div style={{fontSize:\"1rem\"}}>\n        {\n          props.codepoints.map((x,i) => <BinaryBytes value={x} key={i} />)\n        }\n      </div>\n    </CommonOutput>\n  );\n}\n\n/**\n * @param {{ value: number; ucd: { getName: (char: string) => string; }; }} props\n */\nfunction Char (props) {\n  if(isNaN(props.value)) return null;\n\n  const char = String.fromCodePoint(props.value);\n  const title = props.ucd ? props.ucd.getName(char) : \"\";\n\n  return <div className={classes.char} title={title}>\n    <p>{char}</p>\n    <span className={classes.label}>U+{Number(props.value).toString(16).toUpperCase()}</span>\n    { props.ucd && <span className={classes.labelName}>{title}</span> }\n  </div>;\n}\n\n/**\n * @param {{ value: number; }} props\n */\nfunction Bytes (props) {\n  if(isNaN(props.value)) return null;\n\n  try {\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\n\n    return <div className={classes.byte} style={{ marginRight: 4 }}>\n      {bytes.map((b, i) => <span key={i}>{b.toString(16).padStart(2,'0')}</span>)}\n    </div>;\n  } catch (e) {\n    return;\n  }\n}\n\n/**\n * @param {{ value: number; }} props\n */\nfunction BinaryBytes (props) {\n  if(isNaN(props.value)) return null;\n\n  try {\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\n\n    return <div className={classes.byte + \" \" + classes.binaryByte} style={{ marginRight: 4 }}>\n      {bytes.map((b, i, a) => {\n        const bString = b.toString(2).padStart(8, '0');\n        let bytePrefix, byteData;\n        if (a.length === 1) {\n          bytePrefix = bString.substr(0, 1);\n          byteData = bString.substr(1);\n        } else {\n          if (i === 0) {\n            bytePrefix = bString.substr(0, a.length + 1);\n            byteData = bString.substr(a.length + 1);\n          } else  {\n            bytePrefix = bString.substr(0,2);\n            byteData = bString.substr(2);\n          }\n        }\n        return <span key={i}>\n          <span className={classes.bytePrefix}>{bytePrefix}</span>\n          <span className={classes.byteData}>{byteData}</span>\n        </span>;\n      })}\n    </div>\n  } catch (e) {\n    return;\n  }\n}","import { useState, useEffect } from 'react';\n\nimport \"./UCDSearch.css\";\n\nexport default function UCDSearch ({ onChoose }) {\n    const [ value, setValue ] = useState(\"\");\n    const [ ucd, setUCD ] = useState(null);\n\n    useEffect(() => {\n        if (value && !ucd) {\n            fetchUCD();\n        }\n    }, [ucd, value]);\n\n    const results = value.length >= 3 ? searchUCD(ucd, value) : [];\n\n    return (\n        <div className=\"UCDSearch\">\n            <input type=\"search\" value={value} onChange={e => setValue(e.target.value)} placeholder=\"Search\" />\n            <ul className=\"UCDSearch-list\">\n                { results.map(r => (\n                    <li key={r.codePoint} onClick={() => { setValue(\"\"); onChoose(r.codePoint); }}>{r.name} {String.fromCodePoint(r.codePoint)}</li>\n                )) }\n            </ul>\n        </div>\n    )\n\n    async function fetchUCD() {\n        let { default: ucd } = await import('ijmacd.ucd');\n\n        // prime unicode data\n        ucd.getName(\"a\");\n\n        setUCD(ucd);\n    }\n}\n\n/**\n *\n * @param {{ characterNameList: string[] }} ucd\n * @param {string} value\n * @param {number} limit\n */\nfunction searchUCD (ucd, value, limit=100) {\n    const out = [];\n    const found = [];\n\n    if (!ucd) {\n        return [];\n    }\n\n    try {\n        const reg = new RegExp(value, \"i\");\n\n        for (let i = 0; i < ucd.characterNameList.length && out.length < limit; i++) {\n            const name = ucd.characterNameList[i];\n            if (name && reg.test(name)) {\n                out.push({ codePoint: i, name });\n                found.push(i);\n            }\n        }\n    }\n    catch (e) {}\n\n    if (out.length < limit && value.includes(\" \")) {\n        const searchParts = value.toUpperCase().split(\" \");\n\n        for (let i = 0; i < ucd.characterNameList.length && out.length < limit; i++) {\n            const name = ucd.characterNameList[i];\n            if (name && searchParts.every(s => name.includes(s)) && !found.includes(i)) {\n                out.push({ codePoint: i, name });\n            }\n        }\n    }\n\n    return out;\n}","import React, { Component } from 'react';\n\nimport * as formats from '../formats';\nimport { StringOutput, CodePoints, UTF8Bytes, UTF8Binary, EncodedOutput, EscapedOutput, URLEncodedOutput, DecimalOutput } from '../output';\nimport UCDSearch from '../UCDSearch';\n\nimport classes from './style.module.css';\n\nconst TITLE = \"Unichar\";\n\nexport default class App extends Component {\n  constructor (props) {\n    super(props);\n\n    this.state = getHash();\n  }\n\n  onChange = (e) => {\n    this.setValue(e.target.value);\n  }\n\n  setValue (value, format=this.state.format) {\n    this.setState({ value, format }, () => {\n      window.location.hash = `${format}:${encodeURIComponent(value)}`;\n\n      const ii = formats[this.state.format]\n      if(ii.isValid(value)) {\n        document.title = `${TITLE} - ${String.fromCodePoint(...ii.parse(value))}`;\n      }\n    });\n  }\n\n  async componentDidMount () {\n    window.addEventListener(\"hashchange\", () => {\n      this.setState(getHash());\n    });\n\n    this.inputRef.focus();\n  }\n\n  /**\n   * @param {number} codePoint\n   */\n  insertCodePoint (codePoint) {\n    let { value, format }  = this.state;\n\n    const out = formats[format].fromCodePoint(codePoint);\n\n    if (format === \"raw\") {\n      value += out;\n    } else if (format === \"hex\") {\n      value += \" \" + out;\n    } else if (format === \"decimal\") {\n      value += \" \" + out;\n    } else if (format === \"utf8\") {\n      value += \" \" + out;\n    } else if (format === \"encoded\") {\n      value += out;\n    } else if (format === \"escaped\") {\n      value += out;\n    }\n\n    this.setValue(value);\n  }\n\n  render () {\n    const { value, format } = this.state;\n\n    if (!(format in formats)) {\n      return <p>Error: Bad input method chosen</p>;\n    }\n\n    /** @type {import('../formats').Format} */\n    const formatter = formats[format]\n\n    const isValid = formatter.isValid(value);\n\n    let codepoints = isValid ? formatter.parse(value) : [];\n\n    return (\n      <div className={classes.container}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={this.onChange}\n          className={classes.input}\n          style={{border: isValid ? \"\" : \"1px solid #f33\"}}\n          ref={ref => this.inputRef = ref}\n        />\n        <UCDSearch onChoose={cp => this.insertCodePoint(cp)} />\n        <div className={classes.inOutContainer}>\n          <div className={classes.inputContainer}>\n            <h2 className={classes.sectionHeader}>Input Interpretation</h2>\n            <ul className={classes.inputList}>\n              {\n                Object.keys(formats).map(key => {\n                  try {\n                    let classNames = classes.inputChoice;\n                    /** @type {import('../formats').Format} */\n                    const ij = formats[key];\n                    const isValid = ij.isValid(value);\n\n                    if (!isValid) {\n                      classNames += \" \" + classes.invalidInput;\n                    }\n\n                    if (key === format) {\n                      classNames += \" \" + classes.selectedInput;\n                    }\n\n                    return (\n                      <li\n                        key={key}\n                        className={classNames}\n                        onClick={isValid ? (() => this.setValue(value, key)) : undefined}\n                      >\n                        {ij.label}\n                        { isValid && <p>{String.fromCodePoint(...ij.parse(value))}</p> }\n                      </li>\n                    );\n                  } catch (e) {\n                    console.debug(e);\n                    return \"Error decoding value\";\n                  }\n                })\n              }\n            </ul>\n          </div>\n          <div className={classes.outputContainer} style={{flex:1}}>\n            <h2 className={classes.sectionHeader}>Code Points</h2>\n            { isValid &&\n              <CodePoints codepoints={codepoints} onSelect={format === \"hex\" ? null : (value) => this.setValue(value.toUpperCase(), \"hex\")} />\n            }\n          </div>\n          <div className={classes.outputContainer}>\n            <h2 className={classes.sectionHeader}>Output</h2>\n            { isValid &&\n              <ul className={classes.output}>\n                <li><StringOutput codepoints={codepoints} onSelect={format === \"raw\" ? null : (value) => this.setValue(value, \"raw\")} /></li>\n                <li><UTF8Bytes codepoints={codepoints} onSelect={format === \"utf8\" ? null : (value) => this.setValue(value, \"utf8\")} /></li>\n                <li><UTF8Binary codepoints={codepoints} onSelect={format === \"binary\" ? null : (value) => this.setValue(value, \"binary\")} /></li>\n                <li><DecimalOutput codepoints={codepoints} onSelect={format === \"decimal\" ? null : (value) => this.setValue(value, \"decimal\")} /></li>\n                <li><EncodedOutput codepoints={codepoints} onSelect={format === \"encoded\" ? null : (value) => this.setValue(value, \"encoded\")} /></li>\n                <li><URLEncodedOutput codepoints={codepoints} onSelect={format === \"urlEncoded\" ? null : (value) => this.setValue(value, \"urlEncoded\")} /></li>\n                <li><EscapedOutput codepoints={codepoints} onSelect={format === \"escaped\" ? null : (value) => this.setValue(value, \"escaped\")} /></li>\n              </ul>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction getHash () {\n  const { hash } = window.location;\n\n  if (!hash) {\n    return {\n      value: \"\",\n      format: \"raw\"\n    };\n  }\n\n  const value = decodeURIComponent(hash.substr(1));\n\n  const inputMatch = /^([a-z0-9]+):/i.exec(value);\n\n  if (inputMatch) {\n    return {\n      format: inputMatch[1],\n      value: value.substr(inputMatch[0].length),\n    };\n  } else {\n    return {\n      value,\n      format: \"raw\",\n    };\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './Toast.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}