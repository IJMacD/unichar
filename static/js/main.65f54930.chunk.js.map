{"version":3,"sources":["App/style.module.css","input.js","output.jsx","UCDSearch.jsx","App/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","raw","label","isValid","parse","value","String","codepoints","i","length","cp","codePointAt","push","encoded","he","decode","decimal","test","every","x","e","trim","replace","split","map","parseInt","hex","s","a","b","start","end","RangeError","Array","fill","toString","join","p","escaped","this","rawList","re","item","match","out","pos","exec","index","substring","substr","flatten","utf8","bytes","byteString","fromCharCode","u","string","arr","concat","StringOutput","props","str","fromCodePoint","className","classes","onSelect","switchInput","onClick","el","document","createElement","body","appendChild","select","execCommand","removeChild","copyText","EncodedOutput","encode","useNamedReferences","CodePoints","cpList","Char","ucd","UTF8Bytes","charCodeAt","padStart","Bytes","UTF8Binary","BinaryBytes","isNaN","char","title","getName","Number","toUpperCase","labelName","c","byte","style","marginRight","binaryByte","bytePrefix","byteData","bString","onChoose","useState","setValue","setUCD","useEffect","fetchUCD","results","limit","found","reg","RegExp","characterNameList","name","codePoint","includes","searchParts","searchUCD","type","onChange","target","placeholder","r","default","TITLE","App","state","getHash","inputInterpretation","setState","window","location","hash","ii","input","addEventListener","inputRef","focus","container","border","ref","insertCodePoint","inOutContainer","inputContainer","sectionHeader","inputList","Object","keys","key","classNames","inputChoice","ij","invalidInput","selectedInput","undefined","outputContainer","output","Component","decodeURIComponent","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.65f54930.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__2xEoa\",\"input\":\"style_input__3cuwL\",\"inOutContainer\":\"style_inOutContainer__9cTJC\",\"inputContainer\":\"style_inputContainer__1tyxa\",\"outputContainer\":\"style_outputContainer__1i_DA\",\"inputList\":\"style_inputList__g9TtZ\",\"inputChoice\":\"style_inputChoice__a_abM\",\"selectedInput\":\"style_selectedInput__1Wqc8\",\"invalidInput\":\"style_invalidInput__2ERqI\",\"output\":\"style_output__2nInZ\",\"label\":\"style_label__1q7lj\",\"labelName\":\"style_labelName__2GXPC\",\"char\":\"style_char__3d4S7\",\"byte\":\"style_byte__1Otr3\",\"binaryByte\":\"style_binaryByte__2Q0TJ\",\"bytePrefix\":\"style_bytePrefix__1a1Oz\",\"byteData\":\"style_byteData__3RCep\",\"switchInput\":\"style_switchInput__2Eixz\"};","import u from 'utf8';\nimport he from 'he';\n\n/**\n * @typedef Interpreter\n * @prop {string} label\n * @prop {(s: string) => boolean} isValid\n * @prop {(s: string) => number[]} parse\n */\n\n/** @type {Interpreter} */\nexport const raw = {\n    label: \"Raw Characters\",\n    isValid: () => true,\n    parse (value) {\n        const raw = String(value);\n\n        const codepoints = [];\n\n        for (let i = 0; i < raw.length; i++) {\n            const cp = raw.codePointAt(i);\n            codepoints.push(cp);\n            if (cp > 0xffff) {\n                i++;\n            }\n        }\n\n        return codepoints;\n    },\n};\n\n/** @type {Interpreter} */\nexport const encoded = {\n    label: \"Encoded String\",\n    isValid: () => true,\n    parse (value) {\n        return raw.parse(he.decode(String(value)));\n    },\n};\n\n/** @type {Interpreter} */\nexport const decimal = {\n    label: \"Code Point List (Decimal)\",\n    isValid (value) {\n        if(!/^[\\d ]*$/.test(value)) {\n            return false;\n        }\n\n        try {\n            const codepoints = decimal.parse(value);\n            return codepoints.every(x => x >= 0 && x < 0x110000);\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        const raw = String(value).trim().replace(/ +/g, \" \").split(\" \");\n\n        const codepoints = raw.map(x => parseInt(x, 10));\n\n        return codepoints;\n    },\n};\n\n/** @type {Interpreter} */\nexport const hex = {\n    label: \"Code Point List (Hexidecimal)\",\n    isValid (value) {\n        try {\n            const codepoints = hex.parse(value);\n            return codepoints.every(x => x >= 0 && x < 0x110000);\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        const raw = String(value).trim().replace(/[,\\s]+/g, \" \");\n\n        const expanded = raw.replace(/([\\da-f]+)-([\\da-f]+)/gi, (s, a, b) => {\n            const start = parseInt(a, 16);\n            const end = parseInt(b, 16);\n\n            if (start >= end) {\n                throw RangeError(`Start must be less than end: ${start} < ${end}`);\n            }\n\n            return Array(end - start + 1).fill(0).map((x,i) => (i + start).toString(16)).join(\" \");\n        }).split(\" \");\n\n        const codepoints = expanded.map(p => p.replace(/^U\\+/, \"\")).map(x => parseInt(x, 16));\n\n        return codepoints;\n    },\n};\n\n/** @type {Interpreter} */\nexport const escaped = {\n    label: \"Escaped Text\",\n    isValid (value) {\n        try {\n            const codepoints = this.parse(value);\n            return codepoints.every(x => x >= 0 && x < 0x110000);\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        /** @type {(string|string[]|number|number[])[]} */\n        let rawList = [value];\n\n        const regexes = [\n            /\\\\u{([0-9a-fA-F]+)}/g,\n            /\\\\u([0-9a-fA-F]{4})/g,\n            /\\\\U([0-9a-fA-F]{8})/g,\n        ];\n        for (const re of regexes) {\n            rawList = rawList.map(item => {\n                if (typeof item === \"string\") {\n                    const out = [];\n                    let match;\n                    let pos = 0;\n                    while (match = re.exec(item)) {\n                        if (match.index > pos) {\n                            out.push(item.substring(pos, match.index));\n                        }\n                        pos = match.index + match[0].length;\n                        out.push(parseInt(match[1], 16));\n                    }\n                    if (pos < item.length) out.push(item.substr(pos));\n                    return out;\n                }\n                return item;\n            });\n            rawList = flatten(rawList);\n        }\n\n        rawList = rawList.map(item => typeof item === \"string\" ? [...item].map(x => x.codePointAt(0)) : item);\n\n        const codepoints = flatten(rawList);\n\n        return codepoints;\n    },\n};\n\n/** @type {Interpreter} */\nexport const utf8 = {\n    label: \"UTF-8 Bytes\",\n    isValid (value) {\n        value = value.replace(/\\\\x/g, \"\");\n        if (!/^[\\da-f ,]*$/i.test(value)) {\n            return false;\n        }\n\n        try {\n            const raw = String(value).replace(/[ ,]/g, \"\");\n            if (raw.length % 2) {\n            return false;\n            }\n\n            const bytes = [];\n\n            for (let i = 0; i < raw.length; i += 2) {\n                bytes.push(parseInt(raw.substr(i,2), 16));\n            }\n\n            const byteString = String.fromCharCode(...bytes);\n            u.decode(byteString);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        const raw = String(value).replace(/\\\\x/g, \"\").replace(/ /g, \"\");\n        if (raw.length % 2) {\n            return [];\n        }\n\n        const bytes = [];\n\n        for (let i = 0; i < raw.length; i += 2) {\n            bytes.push(parseInt(raw.substr(i,2), 16));\n        }\n\n        const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\n\n        try {\n            const string = u.decode(byteString);\n\n            const codepoints = [...string].map(x => x.codePointAt(0));\n\n            return codepoints;\n        } catch (e) {\n            return [];\n        }\n    }\n};\n\nconst flatten = arr => [].concat(...arr);","import React from 'react';\nimport utf8 from 'utf8';\nimport he from 'he';\n\nimport classes from './App/style.module.css';\n\n/**\n * @param {string} string\n */\nfunction copyText (string) {\n  const el = document.createElement(\"textarea\");\n  el.value = string;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function StringOutput (props) {\n  const str = String.fromCodePoint(...props.codepoints);\n  return (\n    <div>\n      <p className={classes.label}>\n        String\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(str)}>➔</button> }\n        <button className={classes.switchInput} onClick={() => copyText(str)}>📋</button>\n      </p>\n      { str }\n    </div>\n  );\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function EncodedOutput (props) {\n  const str = he.encode(String.fromCodePoint(...props.codepoints), { useNamedReferences: true });\n  return (\n    <div>\n      <p className={classes.label}>\n        Encoded\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(str)}>➔</button> }\n      </p>\n      { str }\n    </div>\n  );\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; ucd: any; }} props\n */\nexport function CodePoints (props) {\n  const cpList = props.codepoints.map(cp => `U+${cp.toString(16)}`).join(\" \");\n\n  return (\n    <div>\n      <p className={classes.label}>\n        Code Points ({props.codepoints.length})\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(cpList)}>➔</button> }\n      </p>\n      {\n        props.codepoints.map((x,i) => <Char value={x} key={i} ucd={props.ucd} />)\n      }\n    </div>\n  );\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function UTF8Bytes (props) {\n\n  const bytes = [...utf8.encode(String.fromCodePoint(...props.codepoints))].map(b => b.charCodeAt(0).toString(16).padStart(2,\"0\")).join(\" \");\n  const length = utf8.encode(String.fromCodePoint(...props.codepoints)).length;\n\n  return (\n    <div>\n      <p className={classes.label}>\n        UTF-8 ({length} {length === 1 ? \"byte\" : \"bytes\"})\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(bytes)}>➔</button> }\n      </p>\n      {\n        props.codepoints.map((x,i) => <Bytes value={x} key={i} />)\n      }\n    </div>\n  );\n}\n\n/**\n * @param {{ codepoints: number[]; }} props\n */\nexport function UTF8Binary (props) {\n  return <div>\n    <div className={classes.label}>UTF-8 Bits</div>\n    {\n      props.codepoints.map((x,i) => <BinaryBytes value={x} key={i} />)\n    }\n  </div>\n}\n\n/**\n * @param {{ value: number; ucd: { getName: (char: string) => string; }; }} props\n */\nfunction Char (props) {\n  if(isNaN(props.value)) return null;\n\n  const char = String.fromCodePoint(props.value);\n  const title = props.ucd ? props.ucd.getName(char) : \"\";\n\n  return <div className={classes.char} title={title}>\n    <p>{char}</p>\n    <span className={classes.label}>U+{Number(props.value).toString(16).toUpperCase()}</span>\n    { props.ucd && <span className={classes.labelName}>{title}</span> }\n  </div>;\n}\n\n/**\n * @param {{ value: number; }} props\n */\nfunction Bytes (props) {\n  if(isNaN(props.value)) return null;\n\n  try {\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\n\n    return <div className={classes.byte} style={{ marginRight: 4 }}>\n      {bytes.map((b, i) => <span key={i}>{b.toString(16).padStart(2,'0')}</span>)}\n    </div>;\n  } catch (e) {\n    return;\n  }\n}\n\n/**\n * @param {{ value: number; }} props\n */\nfunction BinaryBytes (props) {\n  if(isNaN(props.value)) return null;\n\n  try {\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\n\n    return <div className={classes.byte + \" \" + classes.binaryByte} style={{ marginRight: 4 }}>\n      {bytes.map((b, i, a) => {\n        const bString = b.toString(2).padStart(8, '0');\n        let bytePrefix, byteData;\n        if (a.length === 1) {\n          bytePrefix = bString.substr(0, 1);\n          byteData = bString.substr(1);\n        } else {\n          if (i === 0) {\n            bytePrefix = bString.substr(0, a.length + 1);\n            byteData = bString.substr(a.length + 1);\n          } else  {\n            bytePrefix = bString.substr(0,2);\n            byteData = bString.substr(2);\n          }\n        }\n        return <span key={i}>\n          <span className={classes.bytePrefix}>{bytePrefix}</span>\n          <span className={classes.byteData}>{byteData}</span>\n        </span>;\n      })}\n    </div>\n  } catch (e) {\n    return;\n  }\n}","import { useState, useEffect } from 'react';\n\nimport \"./UCDSearch.css\";\n\nexport default function ({ onChoose }) {\n    const [ value, setValue ] = useState(\"\");\n    const [ ucd, setUCD ] = useState(null);\n\n    useEffect(() => {\n        if (!ucd) {\n            fetchUCD();\n        }\n    }, [ucd, value]);\n\n    const results = value.length >= 3 ? searchUCD(ucd, value) : [];\n\n    return (\n        <div className=\"UCDSearch\">\n            <input type=\"search\" value={value} onChange={e => setValue(e.target.value)} placeholder=\"Search\" />\n            <ul className=\"UCDSearch-list\">\n                { results.map(r => (\n                    <li key={r.codePoint} onClick={() => { setValue(\"\"); onChoose(r.codePoint); }}>{r.name} {String.fromCodePoint(r.codePoint)}</li>\n                )) }\n            </ul>\n        </div>\n    )\n\n    async function fetchUCD() {\n        let { default: ucd } = await import('ijmacd.ucd');\n\n        // prime unicode data\n        ucd.getName(\"a\");\n\n        setUCD(ucd);\n    }\n}\n\n/**\n *\n * @param {{ characterNameList: string[] }} ucd\n * @param {string} value\n * @param {number} limit\n */\nfunction searchUCD (ucd, value, limit=100) {\n    const out = [];\n    const found = [];\n\n    if (!ucd) {\n        return [];\n    }\n\n    try {\n        const reg = new RegExp(value, \"i\");\n\n        for (let i = 0; i < ucd.characterNameList.length && out.length < limit; i++) {\n            const name = ucd.characterNameList[i];\n            if (name && reg.test(name)) {\n                out.push({ codePoint: i, name });\n                found.push(i);\n            }\n        }\n    }\n    catch (e) {}\n\n    if (out.length < limit && value.includes(\" \")) {\n        const searchParts = value.toUpperCase().split(\" \");\n\n        for (let i = 0; i < ucd.characterNameList.length && out.length < limit; i++) {\n            const name = ucd.characterNameList[i];\n            if (name && searchParts.every(s => name.includes(s)) && !found.includes(i)) {\n                out.push({ codePoint: i, name });\n            }\n        }\n    }\n\n    return out;\n}","import React, { Component } from 'react';\nimport utf8 from 'utf8';\nimport he from 'he';\n\nimport * as input from '../input';\nimport { StringOutput, CodePoints, UTF8Bytes, UTF8Binary, EncodedOutput } from '../output';\nimport UCDSearch from '../UCDSearch';\n\nimport classes from './style.module.css';\n\nconst TITLE = \"Unichar\";\n\nexport default class App extends Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      value: getHash() || \"\",\n      inputInterpretation: \"raw\",\n    };\n\n  }\n\n  onChange = (e) => {\n    this.setValue(e.target.value);\n  }\n\n  setValue (value, inputInterpretation=this.state.inputInterpretation) {\n    this.setState({ value, inputInterpretation }, () => {\n      window.location.hash = value;\n\n      const ii = input[this.state.inputInterpretation]\n      if(ii.isValid(value)) {\n        document.title = `${TITLE} - ${String.fromCodePoint(...ii.parse(value))}`;\n      }\n    });\n  }\n\n  async componentDidMount () {\n    window.addEventListener(\"hashchange\", () => {\n      const value = getHash();\n      if (value !== this.state.value) {\n        const isCodePoint = /^U\\+[0-9a-f]+/i.test(value);\n        const inputInterpretation = isCodePoint ? \"hex\" : \"raw\";\n        this.setState({ value, inputInterpretation });\n      }\n    });\n\n    this.inputRef.focus();\n  }\n\n  /**\n   * @param {number} codePoint\n   */\n  insertCodePoint (codePoint) {\n    let { value, inputInterpretation }  = this.state;\n\n    if (inputInterpretation === \"raw\") {\n      value += String.fromCodePoint(codePoint);\n    } else if (inputInterpretation === \"hex\") {\n      value += \" \" + codePoint.toString(16);\n    } else if (inputInterpretation === \"decimal\") {\n      value += \" \" + codePoint.toString(10);\n    } else if (inputInterpretation === \"utf8\") {\n      const str = String.fromCodePoint(codePoint);\n      value += \" \" + [...utf8.encode(str)].map(c => c.charCodeAt(0).toString(16).padStart(2, \"0\")).join(\" \");\n    } else if (inputInterpretation === \"encoded\") {\n      const str = String.fromCodePoint(codePoint);\n      value += he.encode(str);\n    } else if (inputInterpretation === \"escaped\") {\n      value += codePoint < 0xffff ? \"\\\\u\" + codePoint.toString(16).padStart(4, \"0\") : `\\\\u{${codePoint.toString(16)}}`;\n    }\n\n    this.setValue(value);\n  }\n\n  render () {\n    const { value, inputInterpretation, ucd } = this.state;\n\n    if (!(inputInterpretation in input)) {\n      return <p>Error: Bad input method chosen</p>;\n    }\n\n    /** @type {import('../input').Interpreter} */\n    const ii = input[inputInterpretation]\n\n    const isValid = ii.isValid(value);\n\n    let codepoints = isValid ? ii.parse(value) : [];\n\n    return (\n      <div className={classes.container}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={this.onChange}\n          className={classes.input}\n          style={{border: isValid ? \"\" : \"1px solid #f33\"}}\n          ref={ref => this.inputRef = ref}\n        />\n        <UCDSearch onChoose={cp => this.insertCodePoint(cp)} />\n        <div className={classes.inOutContainer}>\n          <div className={classes.inputContainer}>\n            <h2 className={classes.sectionHeader}>Input Interpretation</h2>\n            <ul className={classes.inputList}>\n              {\n                Object.keys(input).map(key => {\n                  try {\n                    let classNames = classes.inputChoice;\n                    /** @type {import('../input').Interpreter} */\n                    const ij = input[key];\n                    const isValid = ij.isValid(value);\n\n                    if (!isValid) {\n                      classNames += \" \" + classes.invalidInput;\n                    }\n\n                    if (key === inputInterpretation) {\n                      classNames += \" \" + classes.selectedInput;\n                    }\n\n                    return (\n                      <li\n                        key={key}\n                        className={classNames}\n                        onClick={isValid ? (() => this.setState({ inputInterpretation: key })) : undefined}\n                      >\n                        {ij.label}\n                        { isValid && <p>{String.fromCodePoint(...ij.parse(value))}</p> }\n                      </li>\n                    );\n                  } catch (e) {\n                    return \"Error decoding value\";\n                  }\n                })\n              }\n            </ul>\n          </div>\n          <div className={classes.outputContainer}>\n            <h2 className={classes.sectionHeader}>Output</h2>\n            { isValid &&\n              <ul className={classes.output}>\n                <li><StringOutput codepoints={codepoints} onSelect={inputInterpretation === \"raw\" ? null : (value) => this.setValue(value, \"raw\")} /></li>\n                <li><CodePoints codepoints={codepoints} ucd={ucd} onSelect={inputInterpretation === \"hex\" ? null : (value) => this.setValue(value.toUpperCase(), \"hex\")} /></li>\n                <li><UTF8Bytes codepoints={codepoints} onSelect={inputInterpretation === \"utf8\" ? null : (value) => this.setValue(value, \"utf8\")} /></li>\n                <li><UTF8Binary codepoints={codepoints} /></li>\n                <li><EncodedOutput codepoints={codepoints} onSelect={inputInterpretation === \"encoded\" ? null : (value) => this.setValue(value, \"encoded\")} /></li>\n              </ul>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction getHash () {\n  const { hash } = window.location;\n\n  if (!hash) {\n    return \"\";\n  }\n\n  return decodeURIComponent(hash.substr(1));\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}