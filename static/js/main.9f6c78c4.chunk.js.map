{"version":3,"sources":["App/style.module.css","App/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","container","input","inOutContainer","inputList","inputChoice","invalidInput","selectedInput","output","label","char","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","value","target","setState","state","inputInterpretation","_this2","_this$state","inputs","raw","decimal","hex","utf8","codepoints","String","split","map","x","parseInt","parseAsDecimal","parseAsHexidecimal","i","length","push","codePointAt","parseAsRawChars","bytes","fromCharCode","join","console","log","string","decode","toConsumableArray","parseAsUtf8Bytes","react_default","a","createElement","className","classes","type","style","flex","sectionHeader","keys","key","classNames","isValid","inputValidators","onClick","undefined","Characters","UTF8Bytes","Component","test","every","byteString","Char","Bytes","isNaN","fromCodePoint","Number","toString","toUpperCase","encode","c","charCodeAt","marginRight","b","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f6c78c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__346Fc\",\"input\":\"style_input__1FHaA\",\"inOutContainer\":\"style_inOutContainer__1TSRm\",\"inputList\":\"style_inputList__bodNe\",\"inputChoice\":\"style_inputChoice__1PH2W\",\"invalidInput\":\"style_invalidInput__2S2f5\",\"selectedInput\":\"style_selectedInput__1R5rj\",\"output\":\"style_output__5G1_S\",\"label\":\"style_label__1c5Jw\",\"char\":\"style_char__-OX55\"};","import React, { Component } from 'react';\r\nimport utf8 from 'utf8';\r\n\r\nimport classes from './style.module.css';\r\n\r\nexport default class App extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: \"A\",\r\n      inputInterpretation: \"raw\",\r\n    };\r\n\r\n  }\r\n\r\n  onChange = (e) => {\r\n    const { value } = e.target;\r\n    this.setState({ value });\r\n  }\r\n\r\n  render () {\r\n    const { value, inputInterpretation } = this.state;\r\n\r\n    const inputs = {\r\n      \"raw\": \"Raw Characters\",\r\n      \"decimal\": \"Code Point List (Decimal)\",\r\n      \"hex\": \"Code Point List (Hexidecimal)\",\r\n      \"utf8\": \"UTF-8 Bytes\",\r\n    };\r\n\r\n    let codepoints = [];\r\n\r\n    switch (inputInterpretation) {\r\n      case \"decimal\":\r\n        codepoints = parseAsDecimal(value);\r\n        break;\r\n      case \"hex\":\r\n        codepoints = parseAsHexidecimal(value);\r\n        break;\r\n      case \"raw\":\r\n        codepoints = parseAsRawChars(value);\r\n        break;\r\n      case \"utf8\":\r\n        codepoints = parseAsUtf8Bytes(value);\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.container}>\r\n        <input\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={this.onChange}\r\n          className={classes.input}\r\n        />\r\n        <div className={classes.inOutContainer}>\r\n          <div style={{flex:1}}>\r\n            <h2 className={classes.sectionHeader}>Input Interpretation</h2>\r\n            <ul className={classes.inputList}>\r\n              {\r\n                Object.keys(inputs).map(key => {\r\n                  let classNames = classes.inputChoice;\r\n                  const isValid = inputValidators[key](value);\r\n\r\n                  if (!isValid) {\r\n                    classNames += \" \" + classes.invalidInput;\r\n                  }\r\n                  else if (key === inputInterpretation) {\r\n                    classNames += \" \" + classes.selectedInput;\r\n                  }\r\n\r\n                  return (\r\n                    <li\r\n                      key={key}\r\n                      className={classNames}\r\n                      onClick={isValid ? (() => this.setState({ inputInterpretation: key })) : undefined}\r\n                    >\r\n                      {inputs[key]}\r\n                    </li>\r\n                  );\r\n                })\r\n              }\r\n            </ul>\r\n          </div>\r\n          <div style={{flex:1}}>\r\n            <h2 className={classes.sectionHeader}>Output</h2>\r\n            <ul className={classes.output}>\r\n              <li><Characters codepoints={codepoints} /></li>\r\n              <li><UTF8Bytes codepoints={codepoints} /></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst inputValidators = {\r\n  raw: () => true,\r\n  decimal: value => /^[\\d ]*$/.test(value),\r\n  hex: value => /^[\\da-f ]*$/i.test(value),\r\n  utf8: value => {\r\n    if (!inputValidators.hex(value)) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const raw = String(value).split(\" \");\r\n      const bytes = raw.map(x => parseInt(x, 16));\r\n\r\n      if (!bytes.every(x => x >= 0 && x < 256)) {\r\n        return false;\r\n      }\r\n\r\n      const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\r\n      utf8.decode(byteString);\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  },\r\n};\r\n\r\nfunction parseAsDecimal (value) {\r\n  const raw = String(value).split(\" \");\r\n\r\n  const codepoints = raw.map(x => parseInt(x, 10));\r\n\r\n  return codepoints;\r\n}\r\n\r\nfunction parseAsHexidecimal (value) {\r\n  const raw = String(value).split(\" \");\r\n\r\n  const codepoints = raw.map(x => parseInt(x, 16));\r\n\r\n  return codepoints;\r\n}\r\n\r\nfunction parseAsRawChars (value) {\r\n  const raw = String(value);\r\n\r\n  const codepoints = [];\r\n\r\n  for (let i = 0; i < raw.length; i++) {\r\n    codepoints.push(raw.codePointAt(i));\r\n  }\r\n\r\n  return codepoints;\r\n}\r\n\r\nfunction parseAsUtf8Bytes (value) {\r\n  const raw = String(value).split(\" \");\r\n\r\n  const bytes = raw.map(x => String.fromCharCode(parseInt(x, 16))).join(\"\");\r\n\r\n  console.log(bytes);\r\n\r\n  try {\r\n    const string = utf8.decode(bytes);\r\n\r\n    const codepoints = [...string].map(x => x.codePointAt(0));\r\n\r\n    console.log(codepoints);\r\n    return codepoints;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nfunction Characters (props) {\r\n  return <div>\r\n    <div className={classes.label}>Characters</div>\r\n    {\r\n      props.codepoints.map((x,i) => <Char value={x} key={i} />)\r\n    }\r\n  </div>\r\n}\r\n\r\nfunction UTF8Bytes (props) {\r\n  return <div>\r\n    <div className={classes.label}>UTF8</div>\r\n    {\r\n      props.codepoints.map((x,i) => <Bytes value={x} key={i} />)\r\n    }\r\n  </div>\r\n}\r\n\r\nfunction Char (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  return <div className={classes.char}>\r\n    <div>{String.fromCodePoint(props.value)}</div>\r\n    <span className={classes.label}>U+{Number(props.value).toString(16).toUpperCase()}</span>\r\n  </div>\r\n}\r\n\r\nfunction Bytes (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\r\n\r\n  return <div className={classes.char} style={{ marginRight: 4 }}>\r\n    <div>{bytes.map(b => <span>{b.toString(16)}</span>)}</div>\r\n  </div>\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}