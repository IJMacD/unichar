{"version":3,"sources":["App/style.module.css","App/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","container","input","inOutContainer","inputContainer","outputContainer","inputList","inputChoice","selectedInput","invalidInput","output","label","labelName","char","byte","binaryByte","bytePrefix","byteData","switchInput","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","value","target","setState","state","inputInterpretation","ucd","__webpack_require__","then","t","bind","default","_this2","_this$state","isValid","inputValidators","inputs","raw","encoded","decimal","hex","utf8","inputInterpreters","react_default","a","createElement","codepoints","className","classes","type","style","border","sectionHeader","keys","map","key","classNames","onClick","undefined","cp","String","fromCodePoint","join","StringOutput","onSelect","CodePoints","UTF8Bytes","UTF8Binary","EncodedOutput","Component","test","parseAsDecimal","every","x","parseAsHexidecimal","replace","length","bytes","i","push","parseInt","substr","byteString","fromCharCode","apply","decode","parseAsRawChars","he","string","toConsumableArray","codePointAt","trim","split","p","str","encode","useNamedReferences","cpList","concat","toString","Char","b","charCodeAt","padStart","Bytes","BinaryBytes","isNaN","title","getName","Number","toUpperCase","c","marginRight","bString","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.884d79b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__1j7fp\",\"input\":\"style_input__90bCn\",\"inOutContainer\":\"style_inOutContainer__2NQoM\",\"inputContainer\":\"style_inputContainer__1JgjQ\",\"outputContainer\":\"style_outputContainer__3uOkP\",\"inputList\":\"style_inputList__yOs9k\",\"inputChoice\":\"style_inputChoice__1uK5F\",\"selectedInput\":\"style_selectedInput__1HuK3\",\"invalidInput\":\"style_invalidInput__25Hr-\",\"output\":\"style_output__1DCWk\",\"label\":\"style_label__rSYRC\",\"labelName\":\"style_labelName__1ofAs\",\"char\":\"style_char__2dZD1\",\"byte\":\"style_byte__2Dba-\",\"binaryByte\":\"style_binaryByte__OPAA-\",\"bytePrefix\":\"style_bytePrefix__2Yd_-\",\"byteData\":\"style_byteData__2zsA1\",\"switchInput\":\"style_switchInput__2BSG7\"};","import React, { Component } from 'react';\r\nimport utf8 from 'utf8';\r\nimport he from 'he';\r\n\r\nimport classes from './style.module.css';\r\n\r\nexport default class App extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: \"A\",\r\n      inputInterpretation: \"raw\",\r\n      ucd: null,\r\n    };\r\n\r\n  }\r\n\r\n  onChange = (e) => {\r\n    const { value } = e.target;\r\n    this.setState({ value });\r\n  }\r\n\r\n  async componentDidMount () {\r\n    const { default: ucd } = await import('ijmacd.ucd');\r\n    this.setState({ ucd });\r\n  }\r\n\r\n  // componentDidMount () {\r\n  //   import('ijmacd.ucd').then(({ default: ucd }) => this.setState({ ucd }));\r\n  // }\r\n\r\n  render () {\r\n    const { value, inputInterpretation, ucd } = this.state;\r\n\r\n    const isValid = inputValidators[inputInterpretation](value);\r\n\r\n    const inputs = {\r\n      \"raw\": \"Raw Characters\",\r\n      \"encoded\": \"Encoded String\",\r\n      \"decimal\": \"Code Point List (Decimal)\",\r\n      \"hex\": \"Code Point List (Hexidecimal)\",\r\n      \"utf8\": \"UTF-8 Bytes\",\r\n    };\r\n\r\n    if (!(inputInterpretation in inputInterpreters)) {\r\n      return <p>Error: Bad input method chosen</p>;\r\n    }\r\n\r\n    let codepoints = inputInterpreters[inputInterpretation](value);\r\n\r\n    return (\r\n      <div className={classes.container}>\r\n        <input\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={this.onChange}\r\n          className={classes.input}\r\n          style={{border: isValid ? \"\" : \"1px solid #f33\"}}\r\n        />\r\n        <div className={classes.inOutContainer}>\r\n          <div className={classes.inputContainer}>\r\n            <h2 className={classes.sectionHeader}>Input Interpretation</h2>\r\n            <ul className={classes.inputList}>\r\n              {\r\n                Object.keys(inputs).map(key => {\r\n                  let classNames = classes.inputChoice;\r\n                  const isValid = inputValidators[key](value);\r\n\r\n                  if (!isValid) {\r\n                    classNames += \" \" + classes.invalidInput;\r\n                  }\r\n\r\n                  if (key === inputInterpretation) {\r\n                    classNames += \" \" + classes.selectedInput;\r\n                  }\r\n\r\n                  return (\r\n                    <li\r\n                      key={key}\r\n                      className={classNames}\r\n                      onClick={isValid ? (() => this.setState({ inputInterpretation: key })) : undefined}\r\n                    >\r\n                      {inputs[key]}\r\n                      { isValid && <p>{inputInterpreters[key](value).map(cp => String.fromCodePoint(cp)).join(\"\")}</p> }\r\n                    </li>\r\n                  );\r\n                })\r\n              }\r\n            </ul>\r\n          </div>\r\n          <div className={classes.outputContainer}>\r\n            <h2 className={classes.sectionHeader}>Output</h2>\r\n            { isValid &&\r\n              <ul className={classes.output}>\r\n                <li><StringOutput codepoints={codepoints} onSelect={inputInterpretation === \"raw\" ? false : (value) => this.setState({ inputInterpretation: \"raw\", value })} /></li>\r\n                <li><CodePoints codepoints={codepoints} ucd={ucd} onSelect={inputInterpretation === \"hex\" ? false : (value) => this.setState({ inputInterpretation: \"hex\", value })} /></li>\r\n                <li><UTF8Bytes codepoints={codepoints} onSelect={inputInterpretation === \"utf8\" ? false : (value) => this.setState({ inputInterpretation: \"utf8\", value })} /></li>\r\n                <li><UTF8Binary codepoints={codepoints} /></li>\r\n                <li><EncodedOutput codepoints={codepoints} onSelect={inputInterpretation === \"encoded\" ? false : (value) => this.setState({ inputInterpretation: \"encoded\", value })} /></li>\r\n              </ul>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst inputValidators = {\r\n  raw: () => true,\r\n  encoded: () => true,\r\n  decimal: value => {\r\n    if(!/^[\\d ]*$/.test(value)) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const codepoints = parseAsDecimal(value);\r\n      return codepoints.every(x => x >= 0 && x < 0x110000);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  },\r\n  hex: value => {\r\n    if (!/^ *((U\\+)?[\\da-f]+ *)*$/i.test(value)) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const codepoints = parseAsHexidecimal(value);\r\n      return codepoints.every(x => x >= 0 && x < 0x110000);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  },\r\n  utf8: value => {\r\n    if (!/^[\\da-f ,]*$/i.test(value)) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const raw = String(value).replace(/[ ,]/g, \"\");\r\n      if (raw.length % 2) {\r\n        return false;\r\n      }\r\n\r\n      const bytes = [];\r\n\r\n      for (let i = 0; i < raw.length; i += 2) {\r\n        bytes.push(parseInt(raw.substr(i,2), 16));\r\n      }\r\n\r\n      const byteString = String.fromCharCode(...bytes);\r\n      utf8.decode(byteString);\r\n\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  },\r\n};\r\n\r\nconst inputInterpreters = {\r\n  raw: parseAsRawChars,\r\n  encoded: parseAsEncoded,\r\n  decimal: parseAsDecimal,\r\n  hex: parseAsHexidecimal,\r\n  utf8: parseAsUtf8Bytes,\r\n};\r\n\r\nfunction parseAsDecimal (value) {\r\n  const raw = String(value).trim().replace(/ +/g, \" \").split(\" \");\r\n\r\n  const codepoints = raw.map(x => parseInt(x, 10));\r\n\r\n  return codepoints;\r\n}\r\n\r\nfunction parseAsHexidecimal (value) {\r\n  const raw = String(value).trim().replace(/ +/g, \" \").split(\" \");\r\n\r\n  const codepoints = raw.map(p => p.replace(/^U\\+/, \"\")).map(x => parseInt(x, 16));\r\n\r\n  return codepoints;\r\n}\r\n\r\nfunction parseAsRawChars (value) {\r\n  const raw = String(value);\r\n\r\n  const codepoints = [];\r\n\r\n  for (let i = 0; i < raw.length; i++) {\r\n    const cp = raw.codePointAt(i);\r\n    codepoints.push(cp);\r\n    if (cp > 0xffff) {\r\n      i++;\r\n    }\r\n  }\r\n\r\n  return codepoints;\r\n}\r\n\r\nfunction parseAsEncoded (value) {\r\n  return parseAsRawChars(he.decode(value));\r\n}\r\n\r\nfunction parseAsUtf8Bytes (value) {\r\n  const raw = String(value).replace(/ /g, \"\");\r\n  if (raw.length % 2) {\r\n    return [];\r\n  }\r\n\r\n  const bytes = [];\r\n\r\n  for (let i = 0; i < raw.length; i += 2) {\r\n    bytes.push(parseInt(raw.substr(i,2), 16));\r\n  }\r\n\r\n  const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\r\n\r\n  try {\r\n    const string = utf8.decode(byteString);\r\n\r\n    const codepoints = [...string].map(x => x.codePointAt(0));\r\n\r\n    return codepoints;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nfunction StringOutput (props) {\r\n  const str = String.fromCodePoint(...props.codepoints);\r\n  return (\r\n    <div>\r\n      <p className={classes.label}>\r\n        String\r\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(str)}>➔</button> }\r\n      </p>\r\n      { str }\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction EncodedOutput (props) {\r\n  const str = he.encode(String.fromCodePoint(...props.codepoints), { useNamedReferences: true });\r\n  return (\r\n    <div>\r\n      <p className={classes.label}>\r\n        Encoded\r\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(str)}>➔</button> }\r\n      </p>\r\n      { str }\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CodePoints (props) {\r\n  const cpList = props.codepoints.map(cp => `U+${cp.toString(16)}`).join(\" \");\r\n\r\n  return (\r\n    <div>\r\n      <p className={classes.label}>\r\n        Code Points ({props.codepoints.length})\r\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(cpList)}>➔</button> }\r\n      </p>\r\n      {\r\n        props.codepoints.map((x,i) => <Char value={x} key={i} ucd={props.ucd} />)\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction UTF8Bytes (props) {\r\n\r\n  const bytes = [...utf8.encode(String.fromCodePoint(...props.codepoints))].map(b => b.charCodeAt(0).toString(16).padStart(2,\"0\")).join(\" \");\r\n  const length = utf8.encode(String.fromCodePoint(...props.codepoints)).length;\r\n\r\n  return (\r\n    <div>\r\n      <p className={classes.label}>\r\n        UTF-8 ({length} {length === 1 ? \"byte\" : \"bytes\"})\r\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(bytes)}>➔</button> }\r\n      </p>\r\n      {\r\n        props.codepoints.map((x,i) => <Bytes value={x} key={i} />)\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction UTF8Binary (props) {\r\n  return <div>\r\n    <div className={classes.label}>UTF-8 Bits</div>\r\n    {\r\n      props.codepoints.map((x,i) => <BinaryBytes value={x} key={i} />)\r\n    }\r\n  </div>\r\n}\r\n\r\nfunction Char (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  const char = String.fromCodePoint(props.value);\r\n  const title = props.ucd ? props.ucd.getName(char) : \"\";\r\n\r\n  return <div className={classes.char} title={title}>\r\n    <p>{char}</p>\r\n    <span className={classes.label}>U+{Number(props.value).toString(16).toUpperCase()}</span>\r\n    { props.ucd && <span className={classes.labelName}>{title}</span> }\r\n  </div>\r\n}\r\n\r\nfunction Bytes (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  try {\r\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\r\n\r\n    return <div className={classes.byte} style={{ marginRight: 4 }}>\r\n      {bytes.map((b, i) => <span key={i}>{b.toString(16).padStart(2,'0')}</span>)}\r\n    </div>;\r\n  } catch (e) {\r\n    return;\r\n  }\r\n}\r\n\r\nfunction BinaryBytes (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  try {\r\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\r\n\r\n    return <div className={classes.byte + \" \" + classes.binaryByte} style={{ marginRight: 4 }}>\r\n      {bytes.map((b, i, a) => {\r\n        const bString = b.toString(2).padStart(8, '0');\r\n        let bytePrefix, byteData;\r\n        if (a.length === 1) {\r\n          bytePrefix = bString.substr(0, 1);\r\n          byteData = bString.substr(1);\r\n        } else {\r\n          if (i === 0) {\r\n            bytePrefix = bString.substr(0, a.length + 1);\r\n            byteData = bString.substr(a.length + 1);\r\n          } else  {\r\n            bytePrefix = bString.substr(0,2);\r\n            byteData = bString.substr(2);\r\n          }\r\n        }\r\n        return <span key={i}>\r\n          <span className={classes.bytePrefix}>{bytePrefix}</span>\r\n          <span className={classes.byteData}>{byteData}</span>\r\n        </span>;\r\n      })}\r\n    </div>\r\n  } catch (e) {\r\n    return;\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}