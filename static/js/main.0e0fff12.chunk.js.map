{"version":3,"sources":["App/style.module.css","formats.js","output.jsx","UCDSearch.jsx","App/index.jsx","index.js"],"names":["module","exports","raw","label","isValid","parse","value","String","codepoints","i","length","cp","codePointAt","push","fromCodePoint","encoded","he","decode","encode","decimal","replace","every","x","e","trim","split","map","parseInt","codePoints","toString","join","hex","s","a","b","start","end","RangeError","Array","fill","p","escaped","this","rawList","re","item","match","out","pos","exec","index","substring","substr","flatten","codePoint","padStart","utf8","test","bytes","byteString","fromCharCode","u","string","c","charCodeAt","binary","v","arr","concat","StringOutput","props","str","className","classes","onSelect","switchInput","onClick","el","document","createElement","body","appendChild","select","execCommand","removeChild","copyText","EncodedOutput","useNamedReferences","CodePoints","cpList","React","useState","ucd","setUCD","useEffect","then","default","codePointOutput","codePointList","Char","UTF8Bytes","Bytes","UTF8Binary","formats","BinaryBytes","isNaN","char","title","getName","Number","toUpperCase","labelName","byte","style","marginRight","binaryByte","bytePrefix","byteData","bString","UCDSearch","onChoose","setValue","fetchUCD","results","limit","found","reg","RegExp","characterNameList","name","includes","searchParts","searchUCD","type","onChange","target","placeholder","r","TITLE","App","state","getHash","format","setState","window","location","hash","ii","addEventListener","inputRef","focus","formatter","container","input","border","ref","insertCodePoint","inOutContainer","inputContainer","sectionHeader","inputList","Object","keys","key","classNames","inputChoice","ij","invalidInput","selectedInput","undefined","outputContainer","output","Component","decodeURIComponent","inputMatch","ReactDOM","render","getElementById"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,qBAAqB,eAAiB,8BAA8B,eAAiB,8BAA8B,gBAAkB,+BAA+B,UAAY,yBAAyB,YAAc,2BAA2B,cAAgB,6BAA6B,aAAe,4BAA4B,OAAS,sBAAsB,MAAQ,qBAAqB,UAAY,yBAAyB,KAAO,oBAAoB,KAAO,oBAAoB,WAAa,0BAA0B,WAAa,0BAA0B,SAAW,wBAAwB,YAAc,2BAA2B,cAAgB,+B,+fCW7rBC,EAAM,CACfC,MAAO,iBACPC,QAAS,kBAAM,GACfC,MAAOC,GAKH,IAJA,IAAMJ,EAAMK,OAAOD,GAEbE,EAAa,GAEVC,EAAI,EAAGA,EAAIP,EAAIQ,OAAQD,IAAK,CACjC,IAAME,EAAKT,EAAIU,YAAYH,GAC3BD,EAAWK,KAAKF,GACZA,EAAK,OACLF,IAIR,OAAOD,GAEXM,gBACI,OAAOP,OAAOO,cAAP,MAAAP,OAAM,aAKRQ,EAAU,CACnBZ,MAAO,iBACPC,QAAS,kBAAM,GACfC,MAAOC,GACIJ,EAAIG,MAAMW,IAAGC,OAAOV,OAAOD,KAEtCQ,gBACI,OAAOE,IAAGE,OAAOX,OAAOO,cAAP,MAAAP,OAAM,cAKlBY,EAAU,CACnBhB,MAAO,4BACPC,QAASE,GACLA,EAAQA,EAAMc,QAAQ,UAAW,IAEjC,IAEI,OADmBD,EAAQd,MAAMC,GACfe,OAAM,SAAAC,GAAC,OAAIA,GAAK,GAAKA,EAAI,WAC7C,MAAOC,GACL,OAAO,IAGflB,MAAOC,GACSA,EAAMc,QAAQ,UAAW,IAAII,OAAOJ,QAAQ,MAAO,KAAKK,MAAM,KAEnDC,KAAI,SAAAJ,GAAC,OAAIK,SAASL,EAAG,OAIhDR,gBAA+B,IAAD,uBAAZc,EAAY,yBAAZA,EAAY,gBAC1B,OAAOA,EAAWF,KAAI,SAAAf,GAAE,OAAIA,EAAGkB,SAAS,OAAKC,KAAK,OAK7CC,EAAM,CACf5B,MAAO,gCACPC,QAASE,GACL,IAEI,OADmByB,EAAI1B,MAAMC,GACXe,OAAM,SAAAC,GAAC,OAAIA,GAAK,GAAKA,EAAI,WAC7C,MAAOC,GACL,OAAO,IAGflB,MAAOC,GACSA,EAAMc,QAAQ,iBAAkB,IAAII,OAAOJ,QAAQ,UAAW,KAErDA,QAAQ,2BAA2B,SAACY,EAAGC,EAAGC,GAC3D,IAAMC,EAAQR,SAASM,EAAG,IACpBG,EAAMT,SAASO,EAAG,IAExB,GAAIC,GAASC,EACT,MAAMC,WAAW,gCAAD,OAAiCF,EAAjC,cAA4CC,IAGhE,OAAOE,MAAMF,EAAMD,EAAQ,GAAGI,KAAK,GAAGb,KAAI,SAACJ,EAAEb,GAAH,OAAUA,EAAI0B,GAAON,SAAS,OAAKC,KAAK,QACnFL,MAAM,KAEmBC,KAAI,SAAAc,GAAC,OAAIA,EAAEpB,QAAQ,OAAQ,OAAKM,KAAI,SAAAJ,GAAC,OAAIK,SAASL,EAAG,OAIrFR,gBAA+B,IAAD,uBAAZc,EAAY,yBAAZA,EAAY,gBAC1B,OAAOA,EAAWF,KAAI,SAAAf,GAAE,OAAIA,EAAGkB,SAAS,OAAKC,KAAK,OAK7CW,EAAU,CACnBtC,MAAO,eACPC,QAASE,GACL,IAEI,OADmBoC,KAAKrC,MAAMC,GACZe,OAAM,SAAAC,GAAC,OAAIA,GAAK,GAAKA,EAAI,WAC7C,MAAOC,GACL,OAAO,IAGflB,MAAOC,GASH,IAPA,IAAIqC,EAAU,CAACrC,GAFL,aASL,IAAMsC,EAAE,KACTD,EAAUA,EAAQjB,KAAI,SAAAmB,GAClB,GAAoB,kBAATA,EAAmB,CAI1B,IAHA,IACIC,EADEC,EAAM,GAERC,EAAM,EACHF,EAAQF,EAAGK,KAAKJ,IACfC,EAAMI,MAAQF,GACdD,EAAIlC,KAAKgC,EAAKM,UAAUH,EAAKF,EAAMI,QAEvCF,EAAMF,EAAMI,MAAQJ,EAAM,GAAGpC,OAC7BqC,EAAIlC,KAAKc,SAASmB,EAAM,GAAI,KAGhC,OADIE,EAAMH,EAAKnC,QAAQqC,EAAIlC,KAAKgC,EAAKO,OAAOJ,IACrCD,EAEX,OAAOF,KAEXF,EAAUU,EAAQV,IAlBtB,MALgB,CACZ,uBACA,uBACA,wBAEJ,eAA2B,IAyB3B,OAJAA,EAAUA,EAAQjB,KAAI,SAAAmB,GAAI,MAAoB,kBAATA,EAAoB,YAAIA,GAAMnB,KAAI,SAAAJ,GAAC,OAAIA,EAAEV,YAAY,MAAMiC,KAE7EQ,EAAQV,IAI/B7B,gBAA+B,IAAD,uBAAZc,EAAY,yBAAZA,EAAY,gBAE1B,OAAOA,EAAWF,KAAI,SAAA4B,GAAS,OAC3BA,EAAY,MAAS,MAAQA,EAAUzB,SAAS,IAAI0B,SAAS,EAAG,KAAhE,cAA8ED,EAAUzB,SAAS,IAAjG,QACFC,KAAK,OAKF0B,EAAO,CAChBrD,MAAO,cACPC,QAASE,GAEL,GADAA,EAAQA,EAAMc,QAAQ,OAAQ,KACzB,gBAAgBqC,KAAKnD,GACtB,OAAO,EAGX,IACI,IAAMJ,EAAMK,OAAOD,GAAOc,QAAQ,QAAS,IAC3C,GAAIlB,EAAIQ,OAAS,EACb,OAAO,EAKX,IAFA,IAAMgD,EAAQ,GAELjD,EAAI,EAAGA,EAAIP,EAAIQ,OAAQD,GAAK,EACjCiD,EAAM7C,KAAKc,SAASzB,EAAIkD,OAAO3C,EAAE,GAAI,KAGzC,IAAMkD,EAAapD,OAAOqD,aAAP,MAAArD,OAAuBmD,GAG1C,OAFAG,IAAE5C,OAAO0C,IAEF,EACT,MAAOpC,GACL,OAAO,IAGflB,MAAOC,GACH,IAAMJ,EAAMK,OAAOD,GAAOc,QAAQ,OAAQ,IAAIA,QAAQ,KAAM,IAC5D,GAAIlB,EAAIQ,OAAS,EACb,MAAO,GAKX,IAFA,IAAMgD,EAAQ,GAELjD,EAAI,EAAGA,EAAIP,EAAIQ,OAAQD,GAAK,EACjCiD,EAAM7C,KAAKc,SAASzB,EAAIkD,OAAO3C,EAAE,GAAI,KAGzC,IAAMkD,EAAaD,EAAMhC,KAAI,SAAAJ,GAAC,OAAIf,OAAOqD,aAAatC,MAAIQ,KAAK,IAE/D,IACI,IAAMgC,EAASD,IAAE5C,OAAO0C,GAIxB,OAFmB,YAAIG,GAAQpC,KAAI,SAAAJ,GAAC,OAAIA,EAAEV,YAAY,MAGxD,MAAOW,GACL,MAAO,KAGfT,cAAec,GACJ,YAAIiC,IAAE3C,OAAOX,OAAOO,cAAP,MAAAP,OAAM,YAAkBqB,MAAcF,KAAI,SAAAqC,GAAC,OAAIA,EAAEC,WAAW,GAAGnC,SAAS,IAAI0B,SAAS,EAAG,QAAMzB,KAAK,MAKlHmC,EAAS,CAClB9D,MAAO,iBACPC,QAASE,GACL,GAAI,SAASmD,KAAKnD,GACd,OAAO,EAGX,IAEMqD,EAFQrD,EAAMmB,MAAM,KAAKC,KAAI,SAAAwC,GAAC,OAAIvC,SAASuC,EAAG,MAE3BxC,KAAI,SAAAJ,GAAC,OAAIf,OAAOqD,aAAatC,MAAIQ,KAAK,IAE/D,IAGI,OAFA+B,IAAE5C,OAAO0C,IAEF,EACT,MAAOpC,GACL,OAAO,IAGflB,MAAOC,GACH,IAEMqD,EAFQrD,EAAMkB,OAAOC,MAAM,KAAKC,KAAI,SAAAwC,GAAC,OAAIvC,SAASuC,EAAG,MAElCxC,KAAI,SAAAJ,GAAC,OAAIf,OAAOqD,aAAatC,MAAIQ,KAAK,IAE/D,IACI,IAAMgC,EAASD,IAAE5C,OAAO0C,GAIxB,OAFmB,YAAIG,GAAQpC,KAAI,SAAAJ,GAAC,OAAIA,EAAEV,YAAY,MAGxD,MAAOW,GACL,MAAO,KAGfT,gBAA+B,IAAD,uBAAZc,EAAY,yBAAZA,EAAY,gBAC1B,OAAOA,EAAWF,KAAI,SAAAf,GAAE,OAAIA,EAAGkB,SAAS,GAAG0B,SAAS,EAAG,QAAMzB,KAAK,OAIpEuB,EAAU,SAAAc,GAAG,aAAI,MAAGC,OAAH,oBAAaD,K,uBC7O7B,SAASE,EAAcC,GAC5B,IAAMC,EAAMhE,OAAOO,cAAP,MAAAP,OAAM,YAAkB+D,EAAM9D,aAC1C,OACE,gCACE,oBAAGgE,UAAWC,IAAQtE,MAAtB,mBAEImE,EAAMI,UAAY,wBAAQF,UAAWC,IAAQE,YAAaC,QAAS,kBAAMN,EAAMI,SAASH,IAAtE,oBACpB,wBAAQC,UAAWC,IAAQE,YAAaC,QAAS,kBAnBzD,SAAmBd,GACjB,IAAMe,EAAKC,SAASC,cAAc,YAClCF,EAAGvE,MAAQwD,EACXgB,SAASE,KAAKC,YAAYJ,GAC1BA,EAAGK,SACHJ,SAASK,YAAY,QACrBL,SAASE,KAAKI,YAAYP,GAamCQ,CAASd,IAAhE,6BAEAA,KAQD,SAASe,EAAehB,GAC7B,IAAMC,EAAMvD,IAAGE,OAAOX,OAAOO,cAAP,MAAAP,OAAM,YAAkB+D,EAAM9D,aAAa,CAAE+E,oBAAoB,IACvF,OACE,gCACE,oBAAGf,UAAWC,IAAQtE,MAAtB,oBAEImE,EAAMI,UAAY,wBAAQF,UAAWC,IAAQE,YAAaC,QAAS,kBAAMN,EAAMI,SAASH,IAAtE,uBAEpBA,KAQD,SAASiB,EAAYlB,GAC1B,IAAMmB,EAASnB,EAAM9D,WAAWkB,KAAI,SAAAf,GAAE,kBAASA,EAAGkB,SAAS,QAAOC,KAAK,KADtC,EAET4D,IAAMC,SAAS,MAFN,mBAEzBC,EAFyB,KAEpBC,EAFoB,KAUjC,OANAH,IAAMI,WAAU,WACd,iCAAqBC,MAAK,YAAuB,IAAXH,EAAU,EAAnBI,QAC3BH,EAAOD,QAER,IAGD,sBAAKpB,UAAWC,IAAQwB,gBAAxB,UACE,oBAAGzB,UAAWC,IAAQtE,MAAtB,0BACgBmE,EAAM9D,WAAWE,OADjC,IAEI4D,EAAMI,UAAY,wBAAQF,UAAWC,IAAQE,YAAaC,QAAS,kBAAMN,EAAMI,SAASe,IAAtE,uBAEtB,qBAAKjB,UAAWC,IAAQyB,cAAxB,SAEI5B,EAAM9D,WAAWkB,KAAI,SAACJ,EAAEb,GAAH,OAAS,cAAC0F,EAAD,CAAM7F,MAAOgB,EAAWsE,IAAKA,GAARnF,WAUtD,SAAS2F,EAAW9B,GAEzB,IAAMZ,EAAQ,YAAIF,IAAKtC,OAAOX,OAAOO,cAAP,MAAAP,OAAM,YAAkB+D,EAAM9D,eAAckB,KAAI,SAAAQ,GAAC,OAAIA,EAAE8B,WAAW,GAAGnC,SAAS,IAAI0B,SAAS,EAAE,QAAMzB,KAAK,KAChIpB,EAAS8C,IAAKtC,OAAOX,OAAOO,cAAP,MAAAP,OAAM,YAAkB+D,EAAM9D,cAAaE,OAEtE,OACE,gCACE,oBAAG8D,UAAWC,IAAQtE,MAAtB,oBACUO,EADV,IAC8B,IAAXA,EAAe,OAAS,QAD3C,IAEI4D,EAAMI,UAAY,wBAAQF,UAAWC,IAAQE,YAAaC,QAAS,kBAAMN,EAAMI,SAAShB,IAAtE,uBAGpBY,EAAM9D,WAAWkB,KAAI,SAACJ,EAAEb,GAAH,OAAS,cAAC4F,EAAD,CAAO/F,MAAOgB,GAAQb,SASrD,SAAS6F,EAAYhC,GAC1B,OAAO,gCACL,sBAAKE,UAAWC,IAAQtE,MAAxB,uBAEImE,EAAMI,UAAY,wBAAQF,UAAWC,IAAQE,YAAaC,QAAS,wBAAMN,EAAMI,UAAS,EAAA6B,GAAezF,cAAf,oBAAgCwD,EAAM9D,eAA5G,uBAGpB8D,EAAM9D,WAAWkB,KAAI,SAACJ,EAAEb,GAAH,OAAS,cAAC+F,EAAD,CAAalG,MAAOgB,GAAQb,SAQhE,SAAS0F,EAAM7B,GACb,GAAGmC,MAAMnC,EAAMhE,OAAQ,OAAO,KAE9B,IAAMoG,EAAOnG,OAAOO,cAAcwD,EAAMhE,OAClCqG,EAAQrC,EAAMsB,IAAMtB,EAAMsB,IAAIgB,QAAQF,GAAQ,GAEpD,OAAO,sBAAKlC,UAAWC,IAAQiC,KAAMC,MAAOA,EAArC,UACL,4BAAID,IACJ,uBAAMlC,UAAWC,IAAQtE,MAAzB,eAAmC0G,OAAOvC,EAAMhE,OAAOuB,SAAS,IAAIiF,iBAClExC,EAAMsB,KAAO,sBAAMpB,UAAWC,IAAQsC,UAAzB,SAAqCJ,OAOxD,SAASN,EAAO/B,GACd,GAAGmC,MAAMnC,EAAMhE,OAAQ,OAAO,KAE9B,IACE,IAAMoD,EAAQ,YAAIF,IAAKtC,OAAOX,OAAOO,cAAcwD,EAAMhE,SAASoB,KAAI,SAAAqC,GAAC,OAAIA,EAAEC,WAAW,MAExF,OAAO,qBAAKQ,UAAWC,IAAQuC,KAAMC,MAAO,CAAEC,YAAa,GAApD,SACJxD,EAAMhC,KAAI,SAACQ,EAAGzB,GAAJ,OAAU,+BAAeyB,EAAEL,SAAS,IAAI0B,SAAS,EAAE,MAA9B9C,QAElC,MAAOc,GACP,QAOJ,SAASiF,EAAalC,GACpB,GAAGmC,MAAMnC,EAAMhE,OAAQ,OAAO,KAE9B,IACE,IAAMoD,EAAQ,YAAIF,IAAKtC,OAAOX,OAAOO,cAAcwD,EAAMhE,SAASoB,KAAI,SAAAqC,GAAC,OAAIA,EAAEC,WAAW,MAExF,OAAO,qBAAKQ,UAAWC,IAAQuC,KAAO,IAAMvC,IAAQ0C,WAAYF,MAAO,CAAEC,YAAa,GAA/E,SACJxD,EAAMhC,KAAI,SAACQ,EAAGzB,EAAGwB,GAChB,IACImF,EAAYC,EADVC,EAAUpF,EAAEL,SAAS,GAAG0B,SAAS,EAAG,KAc1C,OAZiB,IAAbtB,EAAEvB,QACJ0G,EAAaE,EAAQlE,OAAO,EAAG,GAC/BiE,EAAWC,EAAQlE,OAAO,IAEhB,IAAN3C,GACF2G,EAAaE,EAAQlE,OAAO,EAAGnB,EAAEvB,OAAS,GAC1C2G,EAAWC,EAAQlE,OAAOnB,EAAEvB,OAAS,KAErC0G,EAAaE,EAAQlE,OAAO,EAAE,GAC9BiE,EAAWC,EAAQlE,OAAO,IAGvB,iCACL,sBAAMoB,UAAWC,IAAQ2C,WAAzB,SAAsCA,IACtC,sBAAM5C,UAAWC,IAAQ4C,SAAzB,SAAoCA,MAFpB5G,QAMtB,MAAOc,GACP,Q,MCjLW,SAASgG,EAAT,GAAmC,IAAbC,EAAY,EAAZA,SAAY,EACjB7B,mBAAS,IADQ,mBACrCrF,EADqC,KAC9BmH,EAD8B,OAErB9B,mBAAS,MAFY,mBAErCC,EAFqC,KAEhCC,EAFgC,KAI7CC,qBAAU,WACFxF,IAAUsF,GAL2B,mCAMrC8B,KAEL,CAAC9B,EAAKtF,IAET,IAAMqH,EAAUrH,EAAMI,QAAU,EA6BpC,SAAoBkF,EAAKtF,GAAmB,IAAZsH,EAAW,uDAAL,IAC5B7E,EAAM,GACN8E,EAAQ,GAEd,IAAKjC,EACD,MAAO,GAGX,IAGI,IAFA,IAAMkC,EAAM,IAAIC,OAAOzH,EAAO,KAErBG,EAAI,EAAGA,EAAImF,EAAIoC,kBAAkBtH,QAAUqC,EAAIrC,OAASkH,EAAOnH,IAAK,CACzE,IAAMwH,EAAOrC,EAAIoC,kBAAkBvH,GAC/BwH,GAAQH,EAAIrE,KAAKwE,KACjBlF,EAAIlC,KAAK,CAAEyC,UAAW7C,EAAGwH,SACzBJ,EAAMhH,KAAKJ,KAIvB,MAAOc,IAEP,GAAIwB,EAAIrC,OAASkH,GAAStH,EAAM4H,SAAS,KAGrC,IAFA,IAAMC,EAAc7H,EAAMwG,cAAcrF,MAAM,KADH,WAGlChB,GACL,IAAMwH,EAAOrC,EAAIoC,kBAAkBvH,GAC/BwH,GAAQE,EAAY9G,OAAM,SAAAW,GAAC,OAAIiG,EAAKC,SAASlG,QAAQ6F,EAAMK,SAASzH,IACpEsC,EAAIlC,KAAK,CAAEyC,UAAW7C,EAAGwH,UAHxBxH,EAAI,EAAGA,EAAImF,EAAIoC,kBAAkBtH,QAAUqC,EAAIrC,OAASkH,EAAOnH,IAAM,EAArEA,GAQb,OAAOsC,EA7D6BqF,CAAUxC,EAAKtF,GAAS,GAE5D,OACI,sBAAKkE,UAAU,YAAf,UACI,uBAAO6D,KAAK,SAAS/H,MAAOA,EAAOgI,SAAU,SAAA/G,GAAC,OAAIkG,EAASlG,EAAEgH,OAAOjI,QAAQkI,YAAY,WACxF,oBAAIhE,UAAU,iBAAd,SACMmD,EAAQjG,KAAI,SAAA+G,GAAC,OACX,qBAAsB7D,QAAS,WAAQ6C,EAAS,IAAKD,EAASiB,EAAEnF,YAAhE,UAAgFmF,EAAER,KAAlF,IAAyF1H,OAAOO,cAAc2H,EAAEnF,aAAvGmF,EAAEnF,mBAjBkB,4CAuB7C,8BAAArB,EAAA,sEACiC,iCADjC,iBACmB2D,EADnB,EACUI,SAGFY,QAAQ,KAEZf,EAAOD,GANX,4CAvB6C,uBCIjD,IAAM8C,EAAQ,UAEOC,E,kDACnB,WAAarE,GAAQ,IAAD,8BAClB,cAAMA,IAKRgE,SAAW,SAAC/G,GACV,EAAKkG,SAASlG,EAAEgH,OAAOjI,QAJvB,EAAKsI,MAAQC,IAHK,E,qDAUVvI,GAAkC,IAAD,OAA1BwI,EAA0B,uDAAnBpG,KAAKkG,MAAME,OACjCpG,KAAKqG,SAAS,CAAEzI,QAAOwI,WAAU,WAC/BE,OAAOC,SAASC,KAAhB,UAA0BJ,EAA1B,YAAoCxI,GAEpC,IAAM6I,EAAK5C,EAAQ,EAAKqC,MAAME,QAC3BK,EAAG/I,QAAQE,KACZwE,SAAS6B,MAAT,UAAoB+B,EAApB,cAA+BnI,OAAOO,cAAP,MAAAP,OAAM,YAAkB4I,EAAG9I,MAAMC,Y,+JAMpE0I,OAAOI,iBAAiB,cAAc,WACpC,EAAKL,SAASF,QAGhBnG,KAAK2G,SAASC,Q,4IAMChG,GAAY,IAAD,EACDZ,KAAKkG,MAAxBtI,EADoB,EACpBA,MAAOwI,EADa,EACbA,OAEP/F,EAAMwD,EAAQuC,GAAQhI,cAAcwC,GAE3B,QAAXwF,EACFxI,GAASyC,EACW,QAAX+F,GAEW,YAAXA,GAEW,SAAXA,EAHTxI,GAAS,IAAMyC,GAKK,YAAX+F,GAEW,YAAXA,KADTxI,GAASyC,GAKXL,KAAK+E,SAASnH,K,+BAGL,IAAD,SACkBoC,KAAKkG,MAAvBtI,EADA,EACAA,MAAOwI,EADP,EACOA,OAEf,KAAMA,KAAUvC,GACd,OAAO,+DAIT,IAAMgD,EAAYhD,EAAQuC,GAEpB1I,EAAUmJ,EAAUnJ,QAAQE,GAE9BE,EAAaJ,EAAUmJ,EAAUlJ,MAAMC,GAAS,GAEpD,OACE,sBAAKkE,UAAWC,IAAQ+E,UAAxB,UACE,uBACEnB,KAAK,OACL/H,MAAOA,EACPgI,SAAU5F,KAAK4F,SACf9D,UAAWC,IAAQgF,MACnBxC,MAAO,CAACyC,OAAQtJ,EAAU,GAAK,kBAC/BuJ,IAAK,SAAAA,GAAG,OAAI,EAAKN,SAAWM,KAE9B,cAAC,EAAD,CAAWnC,SAAU,SAAA7G,GAAE,OAAI,EAAKiJ,gBAAgBjJ,MAChD,sBAAK6D,UAAWC,IAAQoF,eAAxB,UACE,sBAAKrF,UAAWC,IAAQqF,eAAxB,UACE,oBAAItF,UAAWC,IAAQsF,cAAvB,kCACA,oBAAIvF,UAAWC,IAAQuF,UAAvB,SAEIC,OAAOC,KAAK3D,GAAS7E,KAAI,SAAAyI,GACvB,IACE,IAAIC,EAAa3F,IAAQ4F,YAEnBC,EAAK/D,EAAQ4D,GACb/J,EAAUkK,EAAGlK,QAAQE,GAU3B,OARKF,IACHgK,GAAc,IAAM3F,IAAQ8F,cAG1BJ,IAAQrB,IACVsB,GAAc,IAAM3F,IAAQ+F,eAI5B,qBAEEhG,UAAW4F,EACXxF,QAASxE,EAAW,kBAAM,EAAKqH,SAASnH,EAAO6J,SAAQM,EAHzD,UAKGH,EAAGnK,MACFC,GAAW,4BAAIG,OAAOO,cAAP,MAAAP,OAAM,YAAkB+J,EAAGjK,MAAMC,SAL7C6J,GAQT,MAAO5I,GACP,MAAO,gCAMjB,sBAAKiD,UAAWC,IAAQiG,gBAAxB,UACE,oBAAIlG,UAAWC,IAAQsF,cAAvB,yBACE3J,GACA,cAACoF,EAAD,CAAYhF,WAAYA,EAAYkE,SAAqB,QAAXoE,EAAmB,KAAO,SAACxI,GAAD,OAAW,EAAKmH,SAASnH,EAAMwG,cAAe,aAG1H,sBAAKtC,UAAWC,IAAQiG,gBAAxB,UACE,oBAAIlG,UAAWC,IAAQsF,cAAvB,oBACE3J,GACA,qBAAIoE,UAAWC,IAAQkG,OAAvB,UACE,6BAAI,cAACtG,EAAD,CAAc7D,WAAYA,EAAYkE,SAAqB,QAAXoE,EAAmB,KAAO,SAACxI,GAAD,OAAW,EAAKmH,SAASnH,EAAO,YAC9G,6BAAI,cAAC8F,EAAD,CAAW5F,WAAYA,EAAYkE,SAAqB,SAAXoE,EAAoB,KAAO,SAACxI,GAAD,OAAW,EAAKmH,SAASnH,EAAO,aAC5G,6BAAI,cAACgG,EAAD,CAAY9F,WAAYA,EAAYkE,SAAqB,WAAXoE,EAAsB,KAAO,SAACxI,GAAD,OAAW,EAAKmH,SAASnH,EAAO,eAC/G,6BAAI,cAACgF,EAAD,CAAe9E,WAAYA,EAAYkE,SAAqB,YAAXoE,EAAuB,KAAO,SAACxI,GAAD,OAAW,EAAKmH,SAASnH,EAAO,gC,GAlIlGsK,aA4IjC,SAAS/B,IAAY,IACXK,EAASF,OAAOC,SAAhBC,KAER,IAAKA,EACH,MAAO,CACL5I,MAAO,GACPwI,OAAQ,OAIZ,IAAMxI,EAAQuK,mBAAmB3B,EAAK9F,OAAO,IAEvC0H,EAAa,gBAAgB7H,KAAK3C,GAExC,OAAIwK,EACK,CACLhC,OAAQgC,EAAW,GACnBxK,MAAOA,EAAM8C,OAAO0H,EAAW,GAAGpK,SAG7B,CACLJ,QACAwI,OAAQ,OCvKdiC,IAASC,OAAO,cAAC,EAAD,IAASlG,SAASmG,eAAe,W","file":"static/js/main.0e0fff12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__2xEoa\",\"input\":\"style_input__3cuwL\",\"inOutContainer\":\"style_inOutContainer__9cTJC\",\"inputContainer\":\"style_inputContainer__1tyxa\",\"outputContainer\":\"style_outputContainer__1i_DA\",\"inputList\":\"style_inputList__g9TtZ\",\"inputChoice\":\"style_inputChoice__a_abM\",\"selectedInput\":\"style_selectedInput__1Wqc8\",\"invalidInput\":\"style_invalidInput__2ERqI\",\"output\":\"style_output__2nInZ\",\"label\":\"style_label__1q7lj\",\"labelName\":\"style_labelName__2GXPC\",\"char\":\"style_char__3d4S7\",\"byte\":\"style_byte__1Otr3\",\"binaryByte\":\"style_binaryByte__2Q0TJ\",\"bytePrefix\":\"style_bytePrefix__1a1Oz\",\"byteData\":\"style_byteData__3RCep\",\"switchInput\":\"style_switchInput__2Eixz\",\"codePointList\":\"style_codePointList__vVxI2\"};","import u from 'utf8';\nimport he from 'he';\n\n/**\n * @typedef Format\n * @prop {string} label\n * @prop {(value: string) => boolean} isValid\n * @prop {(value: string) => number[]} parse\n * @prop {(...codePoints: number[]) => string} fromCodePoint\n */\n\n/** @type {Format} */\nexport const raw = {\n    label: \"Raw Characters\",\n    isValid: () => true,\n    parse (value) {\n        const raw = String(value);\n\n        const codepoints = [];\n\n        for (let i = 0; i < raw.length; i++) {\n            const cp = raw.codePointAt(i);\n            codepoints.push(cp);\n            if (cp > 0xffff) {\n                i++;\n            }\n        }\n\n        return codepoints;\n    },\n    fromCodePoint (...codePoints) {\n        return String.fromCodePoint(...codePoints);\n    }\n};\n\n/** @type {Format} */\nexport const encoded = {\n    label: \"Encoded String\",\n    isValid: () => true,\n    parse (value) {\n        return raw.parse(he.decode(String(value)));\n    },\n    fromCodePoint (...codePoints) {\n        return he.encode(String.fromCodePoint(...codePoints));\n    }\n};\n\n/** @type {Format} */\nexport const decimal = {\n    label: \"Code Point List (Decimal)\",\n    isValid (value) {\n        value = value.replace(/[^\\d ]/g, \"\");\n\n        try {\n            const codepoints = decimal.parse(value);\n            return codepoints.every(x => x >= 0 && x < 0x110000);\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        const raw = value.replace(/[^\\d ]/g, \"\").trim().replace(/ +/g, \" \").split(\" \");\n\n        const codepoints = raw.map(x => parseInt(x, 10));\n\n        return codepoints;\n    },\n    fromCodePoint (...codePoints) {\n        return codePoints.map(cp => cp.toString(10)).join(\" \");\n    }\n};\n\n/** @type {Format} */\nexport const hex = {\n    label: \"Code Point List (Hexidecimal)\",\n    isValid (value) {\n        try {\n            const codepoints = hex.parse(value);\n            return codepoints.every(x => x >= 0 && x < 0x110000);\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        const raw = value.replace(/[^\\da-f U+-]/gi, \"\").trim().replace(/[,\\s]+/g, \" \");\n\n        const expanded = raw.replace(/([\\da-f]+)-([\\da-f]+)/gi, (s, a, b) => {\n            const start = parseInt(a, 16);\n            const end = parseInt(b, 16);\n\n            if (start >= end) {\n                throw RangeError(`Start must be less than end: ${start} < ${end}`);\n            }\n\n            return Array(end - start + 1).fill(0).map((x,i) => (i + start).toString(16)).join(\" \");\n        }).split(\" \");\n\n        const codepoints = expanded.map(p => p.replace(/^U\\+/, \"\")).map(x => parseInt(x, 16));\n\n        return codepoints;\n    },\n    fromCodePoint (...codePoints) {\n        return codePoints.map(cp => cp.toString(16)).join(\" \");\n    }\n};\n\n/** @type {Format} */\nexport const escaped = {\n    label: \"Escaped Text\",\n    isValid (value) {\n        try {\n            const codepoints = this.parse(value);\n            return codepoints.every(x => x >= 0 && x < 0x110000);\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        /** @type {(string|string[]|number|number[])[]} */\n        let rawList = [value];\n\n        const regexes = [\n            /\\\\u{([0-9a-fA-F]+)}/g,\n            /\\\\u([0-9a-fA-F]{4})/g,\n            /\\\\U([0-9a-fA-F]{8})/g,\n        ];\n        for (const re of regexes) {\n            rawList = rawList.map(item => {\n                if (typeof item === \"string\") {\n                    const out = [];\n                    let match;\n                    let pos = 0;\n                    while (match = re.exec(item)) {\n                        if (match.index > pos) {\n                            out.push(item.substring(pos, match.index));\n                        }\n                        pos = match.index + match[0].length;\n                        out.push(parseInt(match[1], 16));\n                    }\n                    if (pos < item.length) out.push(item.substr(pos));\n                    return out;\n                }\n                return item;\n            });\n            rawList = flatten(rawList);\n        }\n\n        rawList = rawList.map(item => typeof item === \"string\" ? [...item].map(x => x.codePointAt(0)) : item);\n\n        const codepoints = flatten(rawList);\n\n        return codepoints;\n    },\n    fromCodePoint (...codePoints) {\n        // Todo: Escape only non-ascii?\n        return codePoints.map(codePoint =>\n            codePoint < 0xffff ? \"\\\\u\" + codePoint.toString(16).padStart(4, \"0\") : `\\\\u{${codePoint.toString(16)}}`\n        ).join(\" \");\n    }\n};\n\n/** @type {Format} */\nexport const utf8 = {\n    label: \"UTF-8 Bytes\",\n    isValid (value) {\n        value = value.replace(/\\\\x/g, \"\");\n        if (!/^[\\da-f ,]*$/i.test(value)) {\n            return false;\n        }\n\n        try {\n            const raw = String(value).replace(/[ ,]/g, \"\");\n            if (raw.length % 2) {\n                return false;\n            }\n\n            const bytes = [];\n\n            for (let i = 0; i < raw.length; i += 2) {\n                bytes.push(parseInt(raw.substr(i,2), 16));\n            }\n\n            const byteString = String.fromCharCode(...bytes);\n            u.decode(byteString);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        const raw = String(value).replace(/\\\\x/g, \"\").replace(/ /g, \"\");\n        if (raw.length % 2) {\n            return [];\n        }\n\n        const bytes = [];\n\n        for (let i = 0; i < raw.length; i += 2) {\n            bytes.push(parseInt(raw.substr(i,2), 16));\n        }\n\n        const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\n\n        try {\n            const string = u.decode(byteString);\n\n            const codepoints = [...string].map(x => x.codePointAt(0));\n\n            return codepoints;\n        } catch (e) {\n            return [];\n        }\n    },\n    fromCodePoint (codePoints) {\n        return [...u.encode(String.fromCodePoint(...codePoints))].map(c => c.charCodeAt(0).toString(16).padStart(2, \"0\")).join(\" \");\n    }\n};\n\n/** @type {Format} */\nexport const binary = {\n    label: \"UTF-8 (Binary)\",\n    isValid (value) {\n        if (/[^01 ]/.test(value)) {\n            return false;\n        }\n\n        const bytes = value.split(\" \").map(v => parseInt(v, 2));\n\n        const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\n\n        try {\n            u.decode(byteString);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    },\n    parse (value) {\n        const bytes = value.trim().split(\" \").map(v => parseInt(v, 2));\n\n        const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\n\n        try {\n            const string = u.decode(byteString);\n\n            const codepoints = [...string].map(x => x.codePointAt(0));\n\n            return codepoints;\n        } catch (e) {\n            return [];\n        }\n    },\n    fromCodePoint (...codePoints) {\n        return codePoints.map(cp => cp.toString(2).padStart(8, \"0\")).join(\" \");\n    }\n}\n\nconst flatten = arr => [].concat(...arr);","import React from 'react';\nimport utf8 from 'utf8';\nimport he from 'he';\nimport * as formats from './formats';\n\nimport classes from './App/style.module.css';\n\n/**\n * @param {string} string\n */\nfunction copyText (string) {\n  const el = document.createElement(\"textarea\");\n  el.value = string;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function StringOutput (props) {\n  const str = String.fromCodePoint(...props.codepoints);\n  return (\n    <div>\n      <p className={classes.label}>\n        String\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(str)}>➔</button> }\n        <button className={classes.switchInput} onClick={() => copyText(str)}>📋</button>\n      </p>\n      { str }\n    </div>\n  );\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function EncodedOutput (props) {\n  const str = he.encode(String.fromCodePoint(...props.codepoints), { useNamedReferences: true });\n  return (\n    <div>\n      <p className={classes.label}>\n        Encoded\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(str)}>➔</button> }\n      </p>\n      { str }\n    </div>\n  );\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function CodePoints (props) {\n  const cpList = props.codepoints.map(cp => `U+${cp.toString(16)}`).join(\" \");\n  const [ ucd, setUCD ] = React.useState(null);\n\n  React.useEffect(() => {\n    import('ijmacd.ucd').then(({ default: ucd }) => {\n      setUCD(ucd);\n    });\n  }, []);\n\n  return (\n    <div className={classes.codePointOutput}>\n      <p className={classes.label}>\n        Code Points ({props.codepoints.length})\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(cpList)}>➔</button> }\n      </p>\n      <div className={classes.codePointList}>\n        {\n          props.codepoints.map((x,i) => <Char value={x} key={i} ucd={ucd} />)\n        }\n      </div>\n    </div>\n  );\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void; }} props\n */\nexport function UTF8Bytes (props) {\n\n  const bytes = [...utf8.encode(String.fromCodePoint(...props.codepoints))].map(b => b.charCodeAt(0).toString(16).padStart(2,\"0\")).join(\" \");\n  const length = utf8.encode(String.fromCodePoint(...props.codepoints)).length;\n\n  return (\n    <div>\n      <p className={classes.label}>\n        UTF-8 ({length} {length === 1 ? \"byte\" : \"bytes\"})\n        { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(bytes)}>➔</button> }\n      </p>\n      {\n        props.codepoints.map((x,i) => <Bytes value={x} key={i} />)\n      }\n    </div>\n  );\n}\n\n/**\n * @param {{ codepoints: number[]; onSelect: (text: string) => void;  }} props\n */\nexport function UTF8Binary (props) {\n  return <div>\n    <div className={classes.label}>\n      UTF-8 Bits\n      { props.onSelect && <button className={classes.switchInput} onClick={() => props.onSelect(formats.binary.fromCodePoint(...props.codepoints))}>➔</button> }\n    </div>\n    {\n      props.codepoints.map((x,i) => <BinaryBytes value={x} key={i} />)\n    }\n  </div>\n}\n\n/**\n * @param {{ value: number; ucd: { getName: (char: string) => string; }; }} props\n */\nfunction Char (props) {\n  if(isNaN(props.value)) return null;\n\n  const char = String.fromCodePoint(props.value);\n  const title = props.ucd ? props.ucd.getName(char) : \"\";\n\n  return <div className={classes.char} title={title}>\n    <p>{char}</p>\n    <span className={classes.label}>U+{Number(props.value).toString(16).toUpperCase()}</span>\n    { props.ucd && <span className={classes.labelName}>{title}</span> }\n  </div>;\n}\n\n/**\n * @param {{ value: number; }} props\n */\nfunction Bytes (props) {\n  if(isNaN(props.value)) return null;\n\n  try {\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\n\n    return <div className={classes.byte} style={{ marginRight: 4 }}>\n      {bytes.map((b, i) => <span key={i}>{b.toString(16).padStart(2,'0')}</span>)}\n    </div>;\n  } catch (e) {\n    return;\n  }\n}\n\n/**\n * @param {{ value: number; }} props\n */\nfunction BinaryBytes (props) {\n  if(isNaN(props.value)) return null;\n\n  try {\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\n\n    return <div className={classes.byte + \" \" + classes.binaryByte} style={{ marginRight: 4 }}>\n      {bytes.map((b, i, a) => {\n        const bString = b.toString(2).padStart(8, '0');\n        let bytePrefix, byteData;\n        if (a.length === 1) {\n          bytePrefix = bString.substr(0, 1);\n          byteData = bString.substr(1);\n        } else {\n          if (i === 0) {\n            bytePrefix = bString.substr(0, a.length + 1);\n            byteData = bString.substr(a.length + 1);\n          } else  {\n            bytePrefix = bString.substr(0,2);\n            byteData = bString.substr(2);\n          }\n        }\n        return <span key={i}>\n          <span className={classes.bytePrefix}>{bytePrefix}</span>\n          <span className={classes.byteData}>{byteData}</span>\n        </span>;\n      })}\n    </div>\n  } catch (e) {\n    return;\n  }\n}","import { useState, useEffect } from 'react';\n\nimport \"./UCDSearch.css\";\n\nexport default function UCDSearch ({ onChoose }) {\n    const [ value, setValue ] = useState(\"\");\n    const [ ucd, setUCD ] = useState(null);\n\n    useEffect(() => {\n        if (value && !ucd) {\n            fetchUCD();\n        }\n    }, [ucd, value]);\n\n    const results = value.length >= 3 ? searchUCD(ucd, value) : [];\n\n    return (\n        <div className=\"UCDSearch\">\n            <input type=\"search\" value={value} onChange={e => setValue(e.target.value)} placeholder=\"Search\" />\n            <ul className=\"UCDSearch-list\">\n                { results.map(r => (\n                    <li key={r.codePoint} onClick={() => { setValue(\"\"); onChoose(r.codePoint); }}>{r.name} {String.fromCodePoint(r.codePoint)}</li>\n                )) }\n            </ul>\n        </div>\n    )\n\n    async function fetchUCD() {\n        let { default: ucd } = await import('ijmacd.ucd');\n\n        // prime unicode data\n        ucd.getName(\"a\");\n\n        setUCD(ucd);\n    }\n}\n\n/**\n *\n * @param {{ characterNameList: string[] }} ucd\n * @param {string} value\n * @param {number} limit\n */\nfunction searchUCD (ucd, value, limit=100) {\n    const out = [];\n    const found = [];\n\n    if (!ucd) {\n        return [];\n    }\n\n    try {\n        const reg = new RegExp(value, \"i\");\n\n        for (let i = 0; i < ucd.characterNameList.length && out.length < limit; i++) {\n            const name = ucd.characterNameList[i];\n            if (name && reg.test(name)) {\n                out.push({ codePoint: i, name });\n                found.push(i);\n            }\n        }\n    }\n    catch (e) {}\n\n    if (out.length < limit && value.includes(\" \")) {\n        const searchParts = value.toUpperCase().split(\" \");\n\n        for (let i = 0; i < ucd.characterNameList.length && out.length < limit; i++) {\n            const name = ucd.characterNameList[i];\n            if (name && searchParts.every(s => name.includes(s)) && !found.includes(i)) {\n                out.push({ codePoint: i, name });\n            }\n        }\n    }\n\n    return out;\n}","import React, { Component } from 'react';\n\nimport * as formats from '../formats';\nimport { StringOutput, CodePoints, UTF8Bytes, UTF8Binary, EncodedOutput } from '../output';\nimport UCDSearch from '../UCDSearch';\n\nimport classes from './style.module.css';\n\nconst TITLE = \"Unichar\";\n\nexport default class App extends Component {\n  constructor (props) {\n    super(props);\n\n    this.state = getHash();\n  }\n\n  onChange = (e) => {\n    this.setValue(e.target.value);\n  }\n\n  setValue (value, format=this.state.format) {\n    this.setState({ value, format }, () => {\n      window.location.hash = `${format}:${value}`;\n\n      const ii = formats[this.state.format]\n      if(ii.isValid(value)) {\n        document.title = `${TITLE} - ${String.fromCodePoint(...ii.parse(value))}`;\n      }\n    });\n  }\n\n  async componentDidMount () {\n    window.addEventListener(\"hashchange\", () => {\n      this.setState(getHash());\n    });\n\n    this.inputRef.focus();\n  }\n\n  /**\n   * @param {number} codePoint\n   */\n  insertCodePoint (codePoint) {\n    let { value, format }  = this.state;\n\n    const out = formats[format].fromCodePoint(codePoint);\n\n    if (format === \"raw\") {\n      value += out;\n    } else if (format === \"hex\") {\n      value += \" \" + out;\n    } else if (format === \"decimal\") {\n      value += \" \" + out;\n    } else if (format === \"utf8\") {\n      value += \" \" + out;\n    } else if (format === \"encoded\") {\n      value += out;\n    } else if (format === \"escaped\") {\n      value += out;\n    }\n\n    this.setValue(value);\n  }\n\n  render () {\n    const { value, format } = this.state;\n\n    if (!(format in formats)) {\n      return <p>Error: Bad input method chosen</p>;\n    }\n\n    /** @type {import('../formats').Format} */\n    const formatter = formats[format]\n\n    const isValid = formatter.isValid(value);\n\n    let codepoints = isValid ? formatter.parse(value) : [];\n\n    return (\n      <div className={classes.container}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={this.onChange}\n          className={classes.input}\n          style={{border: isValid ? \"\" : \"1px solid #f33\"}}\n          ref={ref => this.inputRef = ref}\n        />\n        <UCDSearch onChoose={cp => this.insertCodePoint(cp)} />\n        <div className={classes.inOutContainer}>\n          <div className={classes.inputContainer}>\n            <h2 className={classes.sectionHeader}>Input Interpretation</h2>\n            <ul className={classes.inputList}>\n              {\n                Object.keys(formats).map(key => {\n                  try {\n                    let classNames = classes.inputChoice;\n                    /** @type {import('../formats').Format} */\n                    const ij = formats[key];\n                    const isValid = ij.isValid(value);\n\n                    if (!isValid) {\n                      classNames += \" \" + classes.invalidInput;\n                    }\n\n                    if (key === format) {\n                      classNames += \" \" + classes.selectedInput;\n                    }\n\n                    return (\n                      <li\n                        key={key}\n                        className={classNames}\n                        onClick={isValid ? (() => this.setValue(value, key)) : undefined}\n                      >\n                        {ij.label}\n                        { isValid && <p>{String.fromCodePoint(...ij.parse(value))}</p> }\n                      </li>\n                    );\n                  } catch (e) {\n                    return \"Error decoding value\";\n                  }\n                })\n              }\n            </ul>\n          </div>\n          <div className={classes.outputContainer}>\n            <h2 className={classes.sectionHeader}>Code Points</h2>\n            { isValid &&\n              <CodePoints codepoints={codepoints} onSelect={format === \"hex\" ? null : (value) => this.setValue(value.toUpperCase(), \"hex\")} />\n            }\n          </div>\n          <div className={classes.outputContainer}>\n            <h2 className={classes.sectionHeader}>Output</h2>\n            { isValid &&\n              <ul className={classes.output}>\n                <li><StringOutput codepoints={codepoints} onSelect={format === \"raw\" ? null : (value) => this.setValue(value, \"raw\")} /></li>\n                <li><UTF8Bytes codepoints={codepoints} onSelect={format === \"utf8\" ? null : (value) => this.setValue(value, \"utf8\")} /></li>\n                <li><UTF8Binary codepoints={codepoints} onSelect={format === \"binary\" ? null : (value) => this.setValue(value, \"binary\")} /></li>\n                <li><EncodedOutput codepoints={codepoints} onSelect={format === \"encoded\" ? null : (value) => this.setValue(value, \"encoded\")} /></li>\n              </ul>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction getHash () {\n  const { hash } = window.location;\n\n  if (!hash) {\n    return {\n      value: \"\",\n      format: \"raw\"\n    };\n  }\n\n  const value = decodeURIComponent(hash.substr(1));\n\n  const inputMatch = /^([a-z0-9]+):/.exec(value);\n\n  if (inputMatch) {\n    return {\n      format: inputMatch[1],\n      value: value.substr(inputMatch[0].length),\n    };\n  } else {\n    return {\n      value,\n      format: \"raw\",\n    };\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}