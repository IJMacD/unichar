{"version":3,"sources":["App/style.module.css","App/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","container","input","inOutContainer","inputList","inputChoice","selectedInput","invalidInput","output","label","char","byte","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","value","target","setState","state","inputInterpretation","_this2","_this$state","isValid","inputValidators","inputs","raw","decimal","hex","utf8","inputInterpreters","react_default","a","createElement","codepoints","className","classes","type","style","border","flex","sectionHeader","keys","map","key","classNames","onClick","undefined","cp","String","fromCodePoint","join","StringOutput","CodePoints","UTF8Bytes","UTF8Binary","Component","hexDigits","test","split","x","parseInt","every","replace","length","bytes","i","push","substr","byteString","fromCharCode","decode","codePointAt","string","toConsumableArray","console","log","apply","Char","Bytes","BinaryBytes","isNaN","Number","toString","toUpperCase","encode","c","charCodeAt","marginRight","b","padStart","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e0890ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__346Fc\",\"input\":\"style_input__1FHaA\",\"inOutContainer\":\"style_inOutContainer__1TSRm\",\"inputList\":\"style_inputList__bodNe\",\"inputChoice\":\"style_inputChoice__1PH2W\",\"selectedInput\":\"style_selectedInput__1R5rj\",\"invalidInput\":\"style_invalidInput__2S2f5\",\"output\":\"style_output__5G1_S\",\"label\":\"style_label__1c5Jw\",\"char\":\"style_char__-OX55\",\"byte\":\"style_byte__8yT2_\"};","import React, { Component } from 'react';\r\nimport utf8 from 'utf8';\r\n\r\nimport classes from './style.module.css';\r\n\r\nexport default class App extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: \"A\",\r\n      inputInterpretation: \"raw\",\r\n    };\r\n\r\n  }\r\n\r\n  onChange = (e) => {\r\n    const { value } = e.target;\r\n    this.setState({ value });\r\n  }\r\n\r\n  render () {\r\n    const { value, inputInterpretation } = this.state;\r\n\r\n    const isValid = inputValidators[inputInterpretation](value);\r\n\r\n    const inputs = {\r\n      \"raw\": \"Raw Characters\",\r\n      \"decimal\": \"Code Point List (Decimal)\",\r\n      \"hex\": \"Code Point List (Hexidecimal)\",\r\n      \"utf8\": \"UTF-8 Bytes\",\r\n    };\r\n\r\n    if (!(inputInterpretation in inputInterpreters)) {\r\n      return <p>Error: Bad input method chosen</p>;\r\n    }\r\n\r\n    let codepoints = inputInterpreters[inputInterpretation](value);\r\n\r\n    return (\r\n      <div className={classes.container}>\r\n        <input\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={this.onChange}\r\n          className={classes.input}\r\n          style={{border: isValid ? \"\" : \"1px solid #f33\"}}\r\n        />\r\n        <div className={classes.inOutContainer}>\r\n          <div style={{flex:1}}>\r\n            <h2 className={classes.sectionHeader}>Input Interpretation</h2>\r\n            <ul className={classes.inputList}>\r\n              {\r\n                Object.keys(inputs).map(key => {\r\n                  let classNames = classes.inputChoice;\r\n                  const isValid = inputValidators[key](value);\r\n\r\n                  if (!isValid) {\r\n                    classNames += \" \" + classes.invalidInput;\r\n                  }\r\n\r\n                  if (key === inputInterpretation) {\r\n                    classNames += \" \" + classes.selectedInput;\r\n                  }\r\n\r\n                  return (\r\n                    <li\r\n                      key={key}\r\n                      className={classNames}\r\n                      onClick={isValid ? (() => this.setState({ inputInterpretation: key })) : undefined}\r\n                    >\r\n                      {inputs[key]}\r\n                      { isValid && <p>{inputInterpreters[key](value).map(cp => String.fromCodePoint(cp)).join(\"\")}</p> }\r\n                    </li>\r\n                  );\r\n                })\r\n              }\r\n            </ul>\r\n          </div>\r\n          <div style={{flex:1}}>\r\n            <h2 className={classes.sectionHeader}>Output</h2>\r\n            { isValid &&\r\n              <ul className={classes.output}>\r\n                <li><StringOutput codepoints={codepoints} /></li>\r\n                <li><CodePoints codepoints={codepoints} /></li>\r\n                <li><UTF8Bytes codepoints={codepoints} /></li>\r\n                <li><UTF8Binary codepoints={codepoints} /></li>\r\n              </ul>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst hexDigits = value => /^[\\da-f ]*$/i.test(value);\r\n\r\nconst inputValidators = {\r\n  raw: () => true,\r\n  decimal: value => {\r\n    if(!/^[\\d ]*$/.test(value)) {\r\n      return false;\r\n    }\r\n\r\n    const raw = String(value).split(\" \");\r\n    const codepoints = raw.map(x => parseInt(x, 10));\r\n\r\n    return codepoints.every(x => x >= 0 && x < 0x110000);\r\n  },\r\n  hex: value => {\r\n    if (!hexDigits(value)) {\r\n      return false;\r\n    }\r\n\r\n    const raw = String(value).split(\" \");\r\n    const codepoints = raw.map(x => parseInt(x, 16));\r\n\r\n    return codepoints.every(x => x >= 0 && x < 0x110000);\r\n  },\r\n  utf8: value => {\r\n    if (!hexDigits(value)) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const raw = String(value).replace(/ /g, \"\");\r\n      if (raw.length % 2) {\r\n        return false;\r\n      }\r\n\r\n      const bytes = [];\r\n\r\n      for (let i = 0; i < raw.length; i += 2) {\r\n        bytes.push(parseInt(raw.substr(i,2), 16));\r\n      }\r\n\r\n      const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\r\n      utf8.decode(byteString);\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  },\r\n};\r\n\r\nconst inputInterpreters = {\r\n  raw: parseAsRawChars,\r\n  decimal: parseAsDecimal,\r\n  hex: parseAsHexidecimal,\r\n  utf8: parseAsUtf8Bytes,\r\n};\r\n\r\nfunction parseAsDecimal (value) {\r\n  const raw = String(value).split(\" \");\r\n\r\n  const codepoints = raw.map(x => parseInt(x, 10));\r\n\r\n  return codepoints;\r\n}\r\n\r\nfunction parseAsHexidecimal (value) {\r\n  const raw = String(value).split(\" \");\r\n\r\n  const codepoints = raw.map(x => parseInt(x, 16));\r\n\r\n  return codepoints;\r\n}\r\n\r\nfunction parseAsRawChars (value) {\r\n  const raw = String(value);\r\n\r\n  const codepoints = [];\r\n\r\n  for (let i = 0; i < raw.length; i++) {\r\n    const cp = raw.codePointAt(i);\r\n    codepoints.push(cp);\r\n    if (cp > 0xffff) {\r\n      i++;\r\n    }\r\n  }\r\n\r\n  return codepoints;\r\n}\r\n\r\nfunction parseAsUtf8Bytes (value) {\r\n  const raw = String(value).replace(/ /g, \"\");\r\n  if (raw.length % 2) {\r\n    return [];\r\n  }\r\n\r\n  const bytes = [];\r\n\r\n  for (let i = 0; i < raw.length; i += 2) {\r\n    bytes.push(parseInt(raw.substr(i,2), 16));\r\n  }\r\n\r\n  const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\r\n\r\n  try {\r\n    const string = utf8.decode(byteString);\r\n\r\n    const codepoints = [...string].map(x => x.codePointAt(0));\r\n\r\n    console.log(codepoints);\r\n    return codepoints;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nfunction StringOutput (props) {\r\n  return <div>\r\n    <div className={classes.label}>String</div>\r\n    {\r\n      String.fromCodePoint(...props.codepoints)\r\n    }\r\n  </div>\r\n}\r\n\r\nfunction CodePoints (props) {\r\n  return <div>\r\n    <div className={classes.label}>Code Points</div>\r\n    {\r\n      props.codepoints.map((x,i) => <Char value={x} key={i} />)\r\n    }\r\n  </div>\r\n}\r\n\r\nfunction UTF8Bytes (props) {\r\n  return <div>\r\n    <div className={classes.label}>UTF-8</div>\r\n    {\r\n      props.codepoints.map((x,i) => <Bytes value={x} key={i} />)\r\n    }\r\n  </div>\r\n}\r\n\r\nfunction UTF8Binary (props) {\r\n  return <div>\r\n    <div className={classes.label}>UTF-8</div>\r\n    {\r\n      props.codepoints.map((x,i) => <BinaryBytes value={x} key={i} />)\r\n    }\r\n  </div>\r\n}\r\n\r\nfunction Char (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  return <div className={classes.char}>\r\n    <div>{String.fromCodePoint(props.value)}</div>\r\n    <span className={classes.label}>U+{Number(props.value).toString(16).toUpperCase()}</span>\r\n  </div>\r\n}\r\n\r\nfunction Bytes (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  try {\r\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\r\n\r\n    return <div className={classes.byte} style={{ marginRight: 4 }}>\r\n      <div>{bytes.map((b, i) => <span key={i}>{b.toString(16).padStart(2,'0')}</span>)}</div>\r\n    </div>;\r\n  } catch (e) {\r\n    return;\r\n  }\r\n}\r\n\r\nfunction BinaryBytes (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  try {\r\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\r\n\r\n    return <div className={classes.byte} style={{ marginRight: 4 }}>\r\n      <div>{bytes.map((b, i) => <span key={i}>{b.toString(2).padStart(8,'0')}</span>)}</div>\r\n    </div>\r\n  } catch (e) {\r\n    return;\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}