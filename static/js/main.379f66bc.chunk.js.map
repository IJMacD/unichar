{"version":3,"sources":["App/style.module.css","App/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","container","input","inOutContainer","inputContainer","outputContainer","inputList","inputChoice","selectedInput","invalidInput","output","label","char","byte","binaryByte","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","value","target","setState","state","inputInterpretation","_this2","_this$state","isValid","inputValidators","inputs","raw","decimal","hex","utf8","inputInterpreters","react_default","a","createElement","codepoints","className","classes","type","style","border","sectionHeader","keys","map","key","classNames","onClick","undefined","cp","String","fromCodePoint","join","StringOutput","CodePoints","UTF8Bytes","UTF8Binary","Component","test","parseAsDecimal","every","x","parseAsHexidecimal","replace","length","bytes","i","push","parseInt","substr","byteString","fromCharCode","apply","decode","codePointAt","string","toConsumableArray","trim","split","p","Char","encode","Bytes","BinaryBytes","isNaN","Number","toString","toUpperCase","c","charCodeAt","marginRight","b","padStart","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2EACAA,EAAAC,QAAA,CAAkBC,UAAA,yBAAAC,MAAA,qBAAAC,eAAA,8BAAAC,eAAA,8BAAAC,gBAAA,+BAAAC,UAAA,yBAAAC,YAAA,2BAAAC,cAAA,6BAAAC,aAAA,4BAAAC,OAAA,sBAAAC,MAAA,qBAAAC,KAAA,oBAAAC,KAAA,oBAAAC,WAAA,mPCIGC,cACnB,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,SAAW,SAACC,GAAM,IACRC,EAAUD,EAAEE,OAAZD,MACRT,EAAKW,SAAS,CAAEF,WAThBT,EAAKY,MAAQ,CACXH,MAAO,IACPI,oBAAqB,OALLb,wEAeV,IAAAc,EAAAX,KAAAY,EAC+BZ,KAAKS,MAApCH,EADAM,EACAN,MAAOI,EADPE,EACOF,oBAETG,EAAUC,EAAgBJ,GAAqBJ,GAE/CS,EAAS,CACbC,IAAO,iBACPC,QAAW,4BACXC,IAAO,gCACPC,KAAQ,eAGV,KAAMT,KAAuBU,GAC3B,OAAOC,EAAAC,EAAAC,cAAA,2CAGT,IAAIC,EAAaJ,EAAkBV,GAAqBJ,GAExD,OACEe,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQ7C,WACtBwC,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLrB,MAAOA,EACPF,SAAUJ,KAAKI,SACfqB,UAAWC,IAAQ5C,MACnB8C,MAAO,CAACC,OAAQhB,EAAU,GAAK,oBAEjCQ,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQ3C,gBACtBsC,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQ1C,gBACtBqC,EAAAC,EAAAC,cAAA,MAAIE,UAAWC,IAAQI,eAAvB,wBACAT,EAAAC,EAAAC,cAAA,MAAIE,UAAWC,IAAQxC,WAEnBY,OAAOiC,KAAKhB,GAAQiB,IAAI,SAAAC,GACtB,IAAIC,EAAaR,IAAQvC,YACnB0B,EAAUC,EAAgBmB,GAAK3B,GAUrC,OARKO,IACHqB,GAAc,IAAMR,IAAQrC,cAG1B4C,IAAQvB,IACVwB,GAAc,IAAMR,IAAQtC,eAI5BiC,EAAAC,EAAAC,cAAA,MACEU,IAAKA,EACLR,UAAWS,EACXC,QAAStB,EAAW,kBAAMF,EAAKH,SAAS,CAAEE,oBAAqBuB,UAAUG,GAExErB,EAAOkB,GACNpB,GAAWQ,EAAAC,EAAAC,cAAA,SAAIH,EAAkBa,GAAK3B,GAAO0B,IAAI,SAAAK,GAAE,OAAIC,OAAOC,cAAcF,KAAKG,KAAK,UAOpGnB,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQzC,iBACtBoC,EAAAC,EAAAC,cAAA,MAAIE,UAAWC,IAAQI,eAAvB,UACEjB,GACAQ,EAAAC,EAAAC,cAAA,MAAIE,UAAWC,IAAQpC,QACrB+B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACkB,EAAD,CAAcjB,WAAYA,KAC9BH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACmB,EAAD,CAAYlB,WAAYA,KAC5BH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACoB,EAAD,CAAWnB,WAAYA,KAC3BH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACqB,EAAD,CAAYpB,WAAYA,gBAjFXqB,aA2F3B/B,EAAkB,CACtBE,IAAK,kBAAM,GACXC,QAAS,SAAAX,GACP,IAAI,WAAWwC,KAAKxC,GAClB,OAAO,EAGT,IAEE,OADmByC,EAAezC,GAChB0C,MAAM,SAAAC,GAAC,OAAIA,GAAK,GAAKA,EAAI,UAC3C,MAAO5C,GACP,OAAO,IAGXa,IAAK,SAAAZ,GACH,IAAK,2BAA2BwC,KAAKxC,GACnC,OAAO,EAGT,IAEE,OADmB4C,EAAmB5C,GACpB0C,MAAM,SAAAC,GAAC,OAAIA,GAAK,GAAKA,EAAI,UAC3C,MAAO5C,GACP,OAAO,IAGXc,KAAM,SAAAb,GACJ,IAAK,eAAewC,KAAKxC,GACvB,OAAO,EAGT,IACE,IAAMU,EAAMsB,OAAOhC,GAAO6C,QAAQ,KAAM,IACxC,GAAInC,EAAIoC,OAAS,EACf,OAAO,EAKT,IAFA,IAAMC,EAAQ,GAELC,EAAI,EAAGA,EAAItC,EAAIoC,OAAQE,GAAK,EACnCD,EAAME,KAAKC,SAASxC,EAAIyC,OAAOH,EAAE,GAAI,KAGvC,IAAMI,EAAapB,OAAOqB,aAAPC,MAAAtB,OAAuBe,GAG1C,OAFAlC,IAAK0C,OAAOH,IAEL,EACP,MAAOrD,GACP,OAAO,KAKPe,EAAoB,CACxBJ,IAsBF,SAA0BV,GAKxB,IAJA,IAAMU,EAAMsB,OAAOhC,GAEbkB,EAAa,GAEV8B,EAAI,EAAGA,EAAItC,EAAIoC,OAAQE,IAAK,CACnC,IAAMjB,EAAKrB,EAAI8C,YAAYR,GAC3B9B,EAAW+B,KAAKlB,GACZA,EAAK,OACPiB,IAIJ,OAAO9B,GAlCPP,QAAS8B,EACT7B,IAAKgC,EACL/B,KAmCF,SAA2Bb,GACzB,IAAMU,EAAMsB,OAAOhC,GAAO6C,QAAQ,KAAM,IACxC,GAAInC,EAAIoC,OAAS,EACf,MAAO,GAKT,IAFA,IAAMC,EAAQ,GAELC,EAAI,EAAGA,EAAItC,EAAIoC,OAAQE,GAAK,EACnCD,EAAME,KAAKC,SAASxC,EAAIyC,OAAOH,EAAE,GAAI,KAGvC,IAAMI,EAAaL,EAAMrB,IAAI,SAAAiB,GAAC,OAAIX,OAAOqB,aAAaV,KAAIT,KAAK,IAE/D,IACE,IAAMuB,EAAS5C,IAAK0C,OAAOH,GAErBlC,EAAa1B,OAAAkE,EAAA,EAAAlE,CAAIiE,GAAQ/B,IAAI,SAAAiB,GAAC,OAAIA,EAAEa,YAAY,KAEtD,OAAOtC,EACP,MAAOnB,GACP,MAAO,MArDX,SAAS0C,EAAgBzC,GAKvB,OAJYgC,OAAOhC,GAAO2D,OAAOd,QAAQ,MAAO,KAAKe,MAAM,KAEpClC,IAAI,SAAAiB,GAAC,OAAIO,SAASP,EAAG,MAK9C,SAASC,EAAoB5C,GAK3B,OAJYgC,OAAOhC,GAAO2D,OAAOd,QAAQ,MAAO,KAAKe,MAAM,KAEpClC,IAAI,SAAAmC,GAAC,OAAIA,EAAEhB,QAAQ,OAAQ,MAAKnB,IAAI,SAAAiB,GAAC,OAAIO,SAASP,EAAG,MA8C9E,SAASR,EAAc7C,GACrB,OAAOyB,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQnC,OAAxB,UAEE+C,OAAOC,cAAPqB,MAAAtB,OAAMxC,OAAAkE,EAAA,EAAAlE,CAAkBF,EAAM4B,cAKpC,SAASkB,EAAY9C,GACnB,OAAOyB,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,KAAGE,UAAWC,IAAQnC,OAAtB,gBAA2CK,EAAM4B,WAAW4B,OAA5D,KAEExD,EAAM4B,WAAWQ,IAAI,SAACiB,EAAEK,GAAH,OAASjC,EAAAC,EAAAC,cAAC6C,EAAD,CAAM9D,MAAO2C,EAAGhB,IAAKqB,OAKzD,SAASX,EAAW/C,GAElB,IAAMwD,EAASjC,IAAKkD,OAAO/B,OAAOC,cAAPqB,MAAAtB,OAAMxC,OAAAkE,EAAA,EAAAlE,CAAkBF,EAAM4B,cAAa4B,OAEtE,OAAO/B,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,KAAGE,UAAWC,IAAQnC,OAAtB,UAAqC6D,EAArC,IAAyD,IAAXA,EAAe,OAAS,QAAtE,KAEExD,EAAM4B,WAAWQ,IAAI,SAACiB,EAAEK,GAAH,OAASjC,EAAAC,EAAAC,cAAC+C,EAAD,CAAOhE,MAAO2C,EAAGhB,IAAKqB,OAK1D,SAASV,EAAYhD,GACnB,OAAOyB,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQnC,OAAxB,cAEEK,EAAM4B,WAAWQ,IAAI,SAACiB,EAAEK,GAAH,OAASjC,EAAAC,EAAAC,cAACgD,EAAD,CAAajE,MAAO2C,EAAGhB,IAAKqB,OAKhE,SAASc,EAAMxE,GACb,OAAG4E,MAAM5E,EAAMU,OAAe,KAEvBe,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQlC,MAC7B6B,EAAAC,EAAAC,cAAA,WAAMe,OAAOC,cAAc3C,EAAMU,QACjCe,EAAAC,EAAAC,cAAA,QAAME,UAAWC,IAAQnC,OAAzB,KAAmCkF,OAAO7E,EAAMU,OAAOoE,SAAS,IAAIC,gBAIxE,SAASL,EAAO1E,GACd,GAAG4E,MAAM5E,EAAMU,OAAQ,OAAO,KAE9B,IACE,IAAM+C,EAAQvD,OAAAkE,EAAA,EAAAlE,CAAIqB,IAAKkD,OAAO/B,OAAOC,cAAc3C,EAAMU,SAAS0B,IAAI,SAAA4C,GAAC,OAAIA,EAAEC,WAAW,KAExF,OAAOxD,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQjC,KAAMmC,MAAO,CAAEkD,YAAa,IACzDzD,EAAAC,EAAAC,cAAA,WAAM8B,EAAMrB,IAAI,SAAC+C,EAAGzB,GAAJ,OAAUjC,EAAAC,EAAAC,cAAA,QAAMU,IAAKqB,GAAIyB,EAAEL,SAAS,IAAIM,SAAS,EAAE,UAErE,MAAO3E,GACP,QAIJ,SAASkE,EAAa3E,GACpB,GAAG4E,MAAM5E,EAAMU,OAAQ,OAAO,KAE9B,IACE,IAAM+C,EAAQvD,OAAAkE,EAAA,EAAAlE,CAAIqB,IAAKkD,OAAO/B,OAAOC,cAAc3C,EAAMU,SAAS0B,IAAI,SAAA4C,GAAC,OAAIA,EAAEC,WAAW,KAExF,OAAOxD,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQjC,KAAO,IAAMiC,IAAQhC,WAAYkC,MAAO,CAAEkD,YAAa,IACnFzB,EAAMrB,IAAI,SAAC+C,EAAGzB,GAAJ,OAAUjC,EAAAC,EAAAC,cAAA,QAAMU,IAAKqB,GAAIyB,EAAEL,SAAS,GAAGM,SAAS,EAAE,SAE/D,MAAO3E,GACP,QCjRgB4E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.379f66bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__346Fc\",\"input\":\"style_input__1FHaA\",\"inOutContainer\":\"style_inOutContainer__1TSRm\",\"inputContainer\":\"style_inputContainer__1c_qZ\",\"outputContainer\":\"style_outputContainer__1sH_Z\",\"inputList\":\"style_inputList__bodNe\",\"inputChoice\":\"style_inputChoice__1PH2W\",\"selectedInput\":\"style_selectedInput__1R5rj\",\"invalidInput\":\"style_invalidInput__2S2f5\",\"output\":\"style_output__5G1_S\",\"label\":\"style_label__1c5Jw\",\"char\":\"style_char__-OX55\",\"byte\":\"style_byte__8yT2_\",\"binaryByte\":\"style_binaryByte__11rCj\"};","import React, { Component } from 'react';\r\nimport utf8 from 'utf8';\r\n\r\nimport classes from './style.module.css';\r\n\r\nexport default class App extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: \"A\",\r\n      inputInterpretation: \"raw\",\r\n    };\r\n\r\n  }\r\n\r\n  onChange = (e) => {\r\n    const { value } = e.target;\r\n    this.setState({ value });\r\n  }\r\n\r\n  render () {\r\n    const { value, inputInterpretation } = this.state;\r\n\r\n    const isValid = inputValidators[inputInterpretation](value);\r\n\r\n    const inputs = {\r\n      \"raw\": \"Raw Characters\",\r\n      \"decimal\": \"Code Point List (Decimal)\",\r\n      \"hex\": \"Code Point List (Hexidecimal)\",\r\n      \"utf8\": \"UTF-8 Bytes\",\r\n    };\r\n\r\n    if (!(inputInterpretation in inputInterpreters)) {\r\n      return <p>Error: Bad input method chosen</p>;\r\n    }\r\n\r\n    let codepoints = inputInterpreters[inputInterpretation](value);\r\n\r\n    return (\r\n      <div className={classes.container}>\r\n        <input\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={this.onChange}\r\n          className={classes.input}\r\n          style={{border: isValid ? \"\" : \"1px solid #f33\"}}\r\n        />\r\n        <div className={classes.inOutContainer}>\r\n          <div className={classes.inputContainer}>\r\n            <h2 className={classes.sectionHeader}>Input Interpretation</h2>\r\n            <ul className={classes.inputList}>\r\n              {\r\n                Object.keys(inputs).map(key => {\r\n                  let classNames = classes.inputChoice;\r\n                  const isValid = inputValidators[key](value);\r\n\r\n                  if (!isValid) {\r\n                    classNames += \" \" + classes.invalidInput;\r\n                  }\r\n\r\n                  if (key === inputInterpretation) {\r\n                    classNames += \" \" + classes.selectedInput;\r\n                  }\r\n\r\n                  return (\r\n                    <li\r\n                      key={key}\r\n                      className={classNames}\r\n                      onClick={isValid ? (() => this.setState({ inputInterpretation: key })) : undefined}\r\n                    >\r\n                      {inputs[key]}\r\n                      { isValid && <p>{inputInterpreters[key](value).map(cp => String.fromCodePoint(cp)).join(\"\")}</p> }\r\n                    </li>\r\n                  );\r\n                })\r\n              }\r\n            </ul>\r\n          </div>\r\n          <div className={classes.outputContainer}>\r\n            <h2 className={classes.sectionHeader}>Output</h2>\r\n            { isValid &&\r\n              <ul className={classes.output}>\r\n                <li><StringOutput codepoints={codepoints} /></li>\r\n                <li><CodePoints codepoints={codepoints} /></li>\r\n                <li><UTF8Bytes codepoints={codepoints} /></li>\r\n                <li><UTF8Binary codepoints={codepoints} /></li>\r\n              </ul>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst inputValidators = {\r\n  raw: () => true,\r\n  decimal: value => {\r\n    if(!/^[\\d ]*$/.test(value)) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const codepoints = parseAsDecimal(value);\r\n      return codepoints.every(x => x >= 0 && x < 0x110000);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  },\r\n  hex: value => {\r\n    if (!/^ *((U\\+)?[\\da-f]+ *)*$/i.test(value)) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const codepoints = parseAsHexidecimal(value);\r\n      return codepoints.every(x => x >= 0 && x < 0x110000);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  },\r\n  utf8: value => {\r\n    if (!/^[\\da-f ]*$/i.test(value)) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const raw = String(value).replace(/ /g, \"\");\r\n      if (raw.length % 2) {\r\n        return false;\r\n      }\r\n\r\n      const bytes = [];\r\n\r\n      for (let i = 0; i < raw.length; i += 2) {\r\n        bytes.push(parseInt(raw.substr(i,2), 16));\r\n      }\r\n\r\n      const byteString = String.fromCharCode(...bytes);\r\n      utf8.decode(byteString);\r\n\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  },\r\n};\r\n\r\nconst inputInterpreters = {\r\n  raw: parseAsRawChars,\r\n  decimal: parseAsDecimal,\r\n  hex: parseAsHexidecimal,\r\n  utf8: parseAsUtf8Bytes,\r\n};\r\n\r\nfunction parseAsDecimal (value) {\r\n  const raw = String(value).trim().replace(/ +/g, \" \").split(\" \");\r\n\r\n  const codepoints = raw.map(x => parseInt(x, 10));\r\n\r\n  return codepoints;\r\n}\r\n\r\nfunction parseAsHexidecimal (value) {\r\n  const raw = String(value).trim().replace(/ +/g, \" \").split(\" \");\r\n\r\n  const codepoints = raw.map(p => p.replace(/^U\\+/, \"\")).map(x => parseInt(x, 16));\r\n\r\n  return codepoints;\r\n}\r\n\r\nfunction parseAsRawChars (value) {\r\n  const raw = String(value);\r\n\r\n  const codepoints = [];\r\n\r\n  for (let i = 0; i < raw.length; i++) {\r\n    const cp = raw.codePointAt(i);\r\n    codepoints.push(cp);\r\n    if (cp > 0xffff) {\r\n      i++;\r\n    }\r\n  }\r\n\r\n  return codepoints;\r\n}\r\n\r\nfunction parseAsUtf8Bytes (value) {\r\n  const raw = String(value).replace(/ /g, \"\");\r\n  if (raw.length % 2) {\r\n    return [];\r\n  }\r\n\r\n  const bytes = [];\r\n\r\n  for (let i = 0; i < raw.length; i += 2) {\r\n    bytes.push(parseInt(raw.substr(i,2), 16));\r\n  }\r\n\r\n  const byteString = bytes.map(x => String.fromCharCode(x)).join(\"\");\r\n\r\n  try {\r\n    const string = utf8.decode(byteString);\r\n\r\n    const codepoints = [...string].map(x => x.codePointAt(0));\r\n\r\n    return codepoints;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nfunction StringOutput (props) {\r\n  return <div>\r\n    <div className={classes.label}>String</div>\r\n    {\r\n      String.fromCodePoint(...props.codepoints)\r\n    }\r\n  </div>\r\n}\r\n\r\nfunction CodePoints (props) {\r\n  return <div>\r\n    <p className={classes.label}>Code Points ({props.codepoints.length})</p>\r\n    {\r\n      props.codepoints.map((x,i) => <Char value={x} key={i} />)\r\n    }\r\n  </div>\r\n}\r\n\r\nfunction UTF8Bytes (props) {\r\n\r\n  const length = utf8.encode(String.fromCodePoint(...props.codepoints)).length;\r\n\r\n  return <div>\r\n    <p className={classes.label}>UTF-8 ({length} {length === 1 ? \"byte\" : \"bytes\"})</p>\r\n    {\r\n      props.codepoints.map((x,i) => <Bytes value={x} key={i} />)\r\n    }\r\n  </div>\r\n}\r\n\r\nfunction UTF8Binary (props) {\r\n  return <div>\r\n    <div className={classes.label}>UTF-8 Bits</div>\r\n    {\r\n      props.codepoints.map((x,i) => <BinaryBytes value={x} key={i} />)\r\n    }\r\n  </div>\r\n}\r\n\r\nfunction Char (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  return <div className={classes.char}>\r\n    <div>{String.fromCodePoint(props.value)}</div>\r\n    <span className={classes.label}>U+{Number(props.value).toString(16).toUpperCase()}</span>\r\n  </div>\r\n}\r\n\r\nfunction Bytes (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  try {\r\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\r\n\r\n    return <div className={classes.byte} style={{ marginRight: 4 }}>\r\n      <div>{bytes.map((b, i) => <span key={i}>{b.toString(16).padStart(2,'0')}</span>)}</div>\r\n    </div>;\r\n  } catch (e) {\r\n    return;\r\n  }\r\n}\r\n\r\nfunction BinaryBytes (props) {\r\n  if(isNaN(props.value)) return null;\r\n\r\n  try {\r\n    const bytes = [...utf8.encode(String.fromCodePoint(props.value))].map(c => c.charCodeAt(0));\r\n\r\n    return <div className={classes.byte + \" \" + classes.binaryByte} style={{ marginRight: 4 }}>\r\n      {bytes.map((b, i) => <span key={i}>{b.toString(2).padStart(8,'0')}</span>)}\r\n    </div>\r\n  } catch (e) {\r\n    return;\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}